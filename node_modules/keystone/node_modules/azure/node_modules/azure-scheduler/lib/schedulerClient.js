/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var moment = require('moment');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var SchedulerClient = ( /** @lends SchedulerClient */ function() {
  /**
   * @class
   * Initializes a new instance of the SchedulerClient class.
   * @constructor
   * 
   * @param {string} cloudServiceName
   * 
   * @param {string} jobCollectionName
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function SchedulerClient(cloudServiceName, jobCollectionName, credentials, baseUri, filters) {
    if (cloudServiceName === null || cloudServiceName === undefined) {
      throw new Error('cloudServiceName cannot be null.');
    }
    if (jobCollectionName === null || jobCollectionName === undefined) {
      throw new Error('jobCollectionName cannot be null.');
    }
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    SchedulerClient['super_'].call(this, credentials, filters);
    
    this.cloudServiceName = cloudServiceName;
    this.jobCollectionName = jobCollectionName;
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2013-03-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the [JobOperations](-JobOperations.html) object.
     * @type {object}
     */
    this.jobs = new JobOperations(this);
  }
  
  util.inherits(SchedulerClient, Service);
  
  
  return SchedulerClient;
})();
exports.SchedulerClient = SchedulerClient;

var JobOperations = ( /** @lends JobOperations */ function() {
  /**
   * @class
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [SchedulerClient] {@link SchedulerClient~SchedulerClient}.
   * See [jobs] {@link SchedulerClient~SchedulerClient#jobs}.
   * Initializes a new instance of the JobOperations class.
   * @constructor
   * 
   * @param {SchedulerClient} client Reference to the service client.
   */
  function JobOperations(client) {
    this.client = client;
  }
  
  /**
   * Creates a new Job, allowing the service to generate a job id. Use
   * CreateOrUpdate if a user-chosen job id is required.
   * 
   * @param {JobCreateParameters} parameters Parameters specifying the job
   * definition for a Create Job operation.
   * 
   * @param {date} [parameters.startTime] Start time for the job.  Defined as
   * ISO-8601.
   * 
   * @param {JobAction} parameters.action Action to invoke for the job.
   * 
   * @param {JobActionType} parameters.action.type Type of action. Can be one
   * of http, https, storageQueue.
   * 
   * @param {RetryPolicy} [parameters.action.retryPolicy] Retry Policy for the
   * job action.
   * 
   * @param {RetryType} [parameters.action.retryPolicy.retryType]  The Retry
   * Type of the Retry Policy. Can be either 'fixed' or 'none'.
   * 
   * @param {TimeSpan} [parameters.action.retryPolicy.retryInterval] The
   * interval between retries.
   * 
   * @param {number} [parameters.action.retryPolicy.retryCount] Number of times
   * a retry should be attempted.
   * 
   * @param {JobErrorAction} [parameters.action.errorAction] Error Action for
   * the job.
   * 
   * @param {JobActionType} [parameters.action.errorAction.type] Type of
   * action. Can be one of http, https, storageQueue.
   * 
   * @param {JobHttpRequest} [parameters.action.errorAction.request] Request
   * for a http or https action type.
   * 
   * @param {string} [parameters.action.errorAction.request.uri] Gets or sets
   * Uri of the endpoint to invoke.
   * 
   * @param {string} [parameters.action.errorAction.request.method] Gets or
   * sets Http method e.g. GET, PUT, POST, DELETE.
   * 
   * @param {object} [parameters.action.errorAction.request.headers] Gets or
   * sets Header name value pairs to supply with the http/https action.
   * 
   * @param {string} [parameters.action.errorAction.request.body] Gets or sets
   * the request body.
   * 
   * @param {HttpAuthentication}
   * [parameters.action.errorAction.request.authentication] Gets or sets the
   * request authentication.
   * 
   * @param {HttpAuthenticationType}
   * [parameters.action.errorAction.request.authentication.type] Specifies the
   * authentication type
   * 
   * @param {JobQueueMessage} [parameters.action.errorAction.queueMessage]
   * Queue and content for a queue message action type.
   * 
   * @param {string}
   * [parameters.action.errorAction.queueMessage.storageAccountName] Name of
   * the storage account for the queue.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.queueName]
   * Name of the queue to send to.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.sasToken] SAS
   * key for the storage account to send message to the queue.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.message]
   * Content of the message to send to the queue.
   * 
   * @param {JobHttpRequest} [parameters.action.request] Request for a http or
   * https action type.
   * 
   * @param {string} [parameters.action.request.uri] Gets or sets Uri of the
   * endpoint to invoke.
   * 
   * @param {string} [parameters.action.request.method] Gets or sets Http
   * method e.g. GET, PUT, POST, DELETE.
   * 
   * @param {object} [parameters.action.request.headers] Gets or sets Header
   * name value pairs to supply with the http/https action.
   * 
   * @param {string} [parameters.action.request.body] Gets or sets the request
   * body.
   * 
   * @param {HttpAuthentication} [parameters.action.request.authentication]
   * Gets or sets the request authentication.
   * 
   * @param {HttpAuthenticationType}
   * [parameters.action.request.authentication.type] Specifies the
   * authentication type
   * 
   * @param {JobQueueMessage} [parameters.action.queueMessage] Queue and
   * content for a queue message action type.
   * 
   * @param {string} [parameters.action.queueMessage.storageAccountName] Name
   * of the storage account for the queue.
   * 
   * @param {string} [parameters.action.queueMessage.queueName] Name of the
   * queue to send to.
   * 
   * @param {string} [parameters.action.queueMessage.sasToken] SAS key for the
   * storage account to send message to the queue.
   * 
   * @param {string} [parameters.action.queueMessage.message] Content of the
   * message to send to the queue.
   * 
   * @param {JobRecurrence} [parameters.recurrence] Recurrence schedule for the
   * job.
   * 
   * @param {JobRecurrenceFrequency} [parameters.recurrence.frequency] The
   * frequency of recurrence.
   * 
   * @param {number} [parameters.recurrence.interval] Interval of the
   * recurrence at the given frequency.
   * 
   * @param {number} [parameters.recurrence.count] Count of occurrences that
   * will execute. Optional. Default will recur infinitely
   * 
   * @param {date} [parameters.recurrence.endTime] Time in ISO-8601 format
   * after which no more occurrences will execute.
   * 
   * @param {JobRecurrenceSchedule} [parameters.recurrence.schedule] Recurrence
   * schedule for the job.
   * 
   * @param {array} [parameters.recurrence.schedule.minutes] Minutes of the
   * hour that the job should execute at.
   * 
   * @param {array} [parameters.recurrence.schedule.hours] Hours of the day
   * that the job should execute at.
   * 
   * @param {array} [parameters.recurrence.schedule.days] Days of the week that
   * the job should execute on.
   * 
   * @param {array} [parameters.recurrence.schedule.months] Months that the job
   * should execute in.  Must be between 1 and 12.
   * 
   * @param {array} [parameters.recurrence.schedule.monthDays] Days of the
   * month that the job should execute on.  Must be between 1 and 31.
   * 
   * @param {array} [parameters.recurrence.schedule.monthlyOccurrences]
   * Occurrences of days within a month.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.create = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.action === null || parameters.action === undefined) {
      return callback(new Error('parameters.action cannot be null.'));
    }
    if (parameters.action.errorAction !== null && parameters.action.errorAction !== undefined) {
      if (parameters.action.errorAction.queueMessage !== null && parameters.action.errorAction.queueMessage !== undefined) {
        if (parameters.action.errorAction.queueMessage.message === null || parameters.action.errorAction.queueMessage.message === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.message cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.queueName === null || parameters.action.errorAction.queueMessage.queueName === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.queueName cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.sasToken === null || parameters.action.errorAction.queueMessage.sasToken === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.sasToken cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.storageAccountName === null || parameters.action.errorAction.queueMessage.storageAccountName === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.storageAccountName cannot be null.'));
        }
      }
      if (parameters.action.errorAction.request !== null && parameters.action.errorAction.request !== undefined) {
        if (parameters.action.errorAction.request.method === null || parameters.action.errorAction.request.method === undefined) {
          return callback(new Error('parameters.action.errorAction.request.method cannot be null.'));
        }
        if (parameters.action.errorAction.request.uri === null || parameters.action.errorAction.request.uri === undefined) {
          return callback(new Error('parameters.action.errorAction.request.uri cannot be null.'));
        }
      }
      if (parameters.action.errorAction.type === null || parameters.action.errorAction.type === undefined) {
        return callback(new Error('parameters.action.errorAction.type cannot be null.'));
      }
    }
    if (parameters.action.queueMessage !== null && parameters.action.queueMessage !== undefined) {
      if (parameters.action.queueMessage.message === null || parameters.action.queueMessage.message === undefined) {
        return callback(new Error('parameters.action.queueMessage.message cannot be null.'));
      }
      if (parameters.action.queueMessage.queueName === null || parameters.action.queueMessage.queueName === undefined) {
        return callback(new Error('parameters.action.queueMessage.queueName cannot be null.'));
      }
      if (parameters.action.queueMessage.sasToken === null || parameters.action.queueMessage.sasToken === undefined) {
        return callback(new Error('parameters.action.queueMessage.sasToken cannot be null.'));
      }
      if (parameters.action.queueMessage.storageAccountName === null || parameters.action.queueMessage.storageAccountName === undefined) {
        return callback(new Error('parameters.action.queueMessage.storageAccountName cannot be null.'));
      }
    }
    if (parameters.action.request !== null && parameters.action.request !== undefined) {
      if (parameters.action.request.method === null || parameters.action.request.method === undefined) {
        return callback(new Error('parameters.action.request.method cannot be null.'));
      }
      if (parameters.action.request.uri === null || parameters.action.request.uri === undefined) {
        return callback(new Error('parameters.action.request.uri cannot be null.'));
      }
    }
    if (parameters.action.retryPolicy !== null && parameters.action.retryPolicy !== undefined) {
      if (parameters.action.retryPolicy.retryType === null || parameters.action.retryPolicy.retryType === undefined) {
        return callback(new Error('parameters.action.retryPolicy.retryType cannot be null.'));
      }
    }
    if (parameters.action.type === null || parameters.action.type === undefined) {
      return callback(new Error('parameters.action.type cannot be null.'));
    }
    if (parameters.recurrence !== null && parameters.recurrence !== undefined) {
      if (parameters.recurrence.frequency === null || parameters.recurrence.frequency === undefined) {
        return callback(new Error('parameters.recurrence.frequency cannot be null.'));
      }
      if (parameters.recurrence.schedule !== null && parameters.recurrence.schedule !== undefined) {
        if (parameters.recurrence.schedule.monthlyOccurrences !== null && parameters.recurrence.schedule.monthlyOccurrences !== undefined) {
          for (var loweredIndex1 = 0; loweredIndex1 < parameters.recurrence.schedule.monthlyOccurrences.length; loweredIndex1 = loweredIndex1 + 1) {
            var monthlyOccurrencesParameterItem = parameters.recurrence.schedule.monthlyOccurrences[loweredIndex1];
            if (monthlyOccurrencesParameterItem.day === null || monthlyOccurrencesParameterItem.day === undefined) {
              return callback(new Error('parameters.recurrence.schedule.monthlyOccurrences.day cannot be null.'));
            }
          }
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs';
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobCreateParametersValue = {};
    requestDoc = jobCreateParametersValue;
    
    if (parameters.startTime !== null && parameters.startTime !== undefined) {
      jobCreateParametersValue['startTime'] = parameters.startTime;
    }
    
    var actionValue = {};
    jobCreateParametersValue['action'] = actionValue;
    
    actionValue['type'] = parameters.action.type !== null && parameters.action.type !== undefined ? parameters.action.type.toString() : 'Http';
    
    if (parameters.action.retryPolicy !== null && parameters.action.retryPolicy !== undefined) {
      var retryPolicyValue = {};
      actionValue['retryPolicy'] = retryPolicyValue;
      
      retryPolicyValue['retryType'] = parameters.action.retryPolicy.retryType !== null && parameters.action.retryPolicy.retryType !== undefined ? parameters.action.retryPolicy.retryType.toString() : 'None';
      
      if (parameters.action.retryPolicy.retryInterval !== null && parameters.action.retryPolicy.retryInterval !== undefined) {
        retryPolicyValue['retryInterval'] = parameters.action.retryPolicy.retryInterval.toIsoString();
      }
      
      if (parameters.action.retryPolicy.retryCount !== null && parameters.action.retryPolicy.retryCount !== undefined) {
        retryPolicyValue['retryCount'] = parameters.action.retryPolicy.retryCount;
      }
    }
    
    if (parameters.action.errorAction !== null && parameters.action.errorAction !== undefined) {
      var errorActionValue = {};
      actionValue['errorAction'] = errorActionValue;
      
      errorActionValue['type'] = parameters.action.errorAction.type !== null && parameters.action.errorAction.type !== undefined ? parameters.action.errorAction.type.toString() : 'Http';
      
      if (parameters.action.errorAction.request !== null && parameters.action.errorAction.request !== undefined) {
        var requestValue = {};
        errorActionValue['request'] = requestValue;
        
        requestValue['uri'] = parameters.action.errorAction.request.uri;
        
        requestValue['method'] = parameters.action.errorAction.request.method;
        
        if (parameters.action.errorAction.request.headers !== null && parameters.action.errorAction.request.headers !== undefined) {
          var headersDictionary = {};
          for (var headersKey in parameters.action.errorAction.request.headers) {
            var headersValue = parameters.action.errorAction.request.headers[headersKey];
            headersDictionary[headersKey] = headersValue;
          }
          requestValue['headers'] = headersDictionary;
        }
        
        if (parameters.action.errorAction.request.body !== null && parameters.action.errorAction.request.body !== undefined) {
          requestValue['body'] = parameters.action.errorAction.request.body;
        }
        
        if (parameters.action.errorAction.request.authentication !== null && parameters.action.errorAction.request.authentication !== undefined) {
          var authenticationValue = {};
          requestValue['authentication'] = authenticationValue;
          if (parameters.action.errorAction.request.authentication.type === 'ClientCertificate') {
            authenticationValue['type'] = 'ClientCertificate';
            var derived = parameters.action.errorAction.request.authentication;
            
            if (derived.password !== null && derived.password !== undefined) {
              authenticationValue['password'] = derived.password;
            }
            
            if (derived.pfx !== null && derived.pfx !== undefined) {
              authenticationValue['pfx'] = derived.pfx;
            }
            
            if (derived.certificateThumbprint !== null && derived.certificateThumbprint !== undefined) {
              authenticationValue['certificateThumbprint'] = derived.certificateThumbprint;
            }
            
            if (derived.certificateExpiration !== null && derived.certificateExpiration !== undefined) {
              authenticationValue['certificateExpiration'] = derived.certificateExpiration;
            }
            
            if (derived.certificateSubjectName !== null && derived.certificateSubjectName !== undefined) {
              authenticationValue['certificateSubjectName'] = derived.certificateSubjectName;
            }
            
            if (derived.type !== null && derived.type !== undefined) {
              authenticationValue['type'] = derived.type !== null && derived.type !== undefined ? derived.type.toString() : 'NotSpecified';
            }
          }
          if (parameters.action.errorAction.request.authentication.type === 'ActiveDirectoryOAuth') {
            authenticationValue['type'] = 'ActiveDirectoryOAuth';
            var derived2 = parameters.action.errorAction.request.authentication;
            
            if (derived2.secret !== null && derived2.secret !== undefined) {
              authenticationValue['secret'] = derived2.secret;
            }
            
            if (derived2.tenant !== null && derived2.tenant !== undefined) {
              authenticationValue['tenant'] = derived2.tenant;
            }
            
            if (derived2.audience !== null && derived2.audience !== undefined) {
              authenticationValue['audience'] = derived2.audience;
            }
            
            if (derived2.clientId !== null && derived2.clientId !== undefined) {
              authenticationValue['clientId'] = derived2.clientId;
            }
            
            if (derived2.type !== null && derived2.type !== undefined) {
              authenticationValue['type'] = derived2.type !== null && derived2.type !== undefined ? derived2.type.toString() : 'NotSpecified';
            }
          }
          if (parameters.action.errorAction.request.authentication.type === 'Basic') {
            authenticationValue['type'] = 'Basic';
            var derived3 = parameters.action.errorAction.request.authentication;
            
            authenticationValue['username'] = derived3.username;
            
            if (derived3.password !== null && derived3.password !== undefined) {
              authenticationValue['password'] = derived3.password;
            }
            
            if (derived3.type !== null && derived3.type !== undefined) {
              authenticationValue['type'] = derived3.type !== null && derived3.type !== undefined ? derived3.type.toString() : 'NotSpecified';
            }
          }
        }
      }
      
      if (parameters.action.errorAction.queueMessage !== null && parameters.action.errorAction.queueMessage !== undefined) {
        var queueMessageValue = {};
        errorActionValue['queueMessage'] = queueMessageValue;
        
        queueMessageValue['storageAccount'] = parameters.action.errorAction.queueMessage.storageAccountName;
        
        queueMessageValue['queueName'] = parameters.action.errorAction.queueMessage.queueName;
        
        queueMessageValue['sasToken'] = parameters.action.errorAction.queueMessage.sasToken;
        
        queueMessageValue['message'] = parameters.action.errorAction.queueMessage.message;
      }
    }
    
    if (parameters.action.request !== null && parameters.action.request !== undefined) {
      var requestValue2 = {};
      actionValue['request'] = requestValue2;
      
      requestValue2['uri'] = parameters.action.request.uri;
      
      requestValue2['method'] = parameters.action.request.method;
      
      if (parameters.action.request.headers !== null && parameters.action.request.headers !== undefined) {
        var headersDictionary2 = {};
        for (var headersKey2 in parameters.action.request.headers) {
          var headersValue2 = parameters.action.request.headers[headersKey2];
          headersDictionary2[headersKey2] = headersValue2;
        }
        requestValue2['headers'] = headersDictionary2;
      }
      
      if (parameters.action.request.body !== null && parameters.action.request.body !== undefined) {
        requestValue2['body'] = parameters.action.request.body;
      }
      
      if (parameters.action.request.authentication !== null && parameters.action.request.authentication !== undefined) {
        var authenticationValue2 = {};
        requestValue2['authentication'] = authenticationValue2;
        if (parameters.action.request.authentication.type === 'ClientCertificate') {
          authenticationValue2['type'] = 'ClientCertificate';
          var derived4 = parameters.action.request.authentication;
          
          if (derived4.password !== null && derived4.password !== undefined) {
            authenticationValue2['password'] = derived4.password;
          }
          
          if (derived4.pfx !== null && derived4.pfx !== undefined) {
            authenticationValue2['pfx'] = derived4.pfx;
          }
          
          if (derived4.certificateThumbprint !== null && derived4.certificateThumbprint !== undefined) {
            authenticationValue2['certificateThumbprint'] = derived4.certificateThumbprint;
          }
          
          if (derived4.certificateExpiration !== null && derived4.certificateExpiration !== undefined) {
            authenticationValue2['certificateExpiration'] = derived4.certificateExpiration;
          }
          
          if (derived4.certificateSubjectName !== null && derived4.certificateSubjectName !== undefined) {
            authenticationValue2['certificateSubjectName'] = derived4.certificateSubjectName;
          }
          
          if (derived4.type !== null && derived4.type !== undefined) {
            authenticationValue2['type'] = derived4.type !== null && derived4.type !== undefined ? derived4.type.toString() : 'NotSpecified';
          }
        }
        if (parameters.action.request.authentication.type === 'ActiveDirectoryOAuth') {
          authenticationValue2['type'] = 'ActiveDirectoryOAuth';
          var derived5 = parameters.action.request.authentication;
          
          if (derived5.secret !== null && derived5.secret !== undefined) {
            authenticationValue2['secret'] = derived5.secret;
          }
          
          if (derived5.tenant !== null && derived5.tenant !== undefined) {
            authenticationValue2['tenant'] = derived5.tenant;
          }
          
          if (derived5.audience !== null && derived5.audience !== undefined) {
            authenticationValue2['audience'] = derived5.audience;
          }
          
          if (derived5.clientId !== null && derived5.clientId !== undefined) {
            authenticationValue2['clientId'] = derived5.clientId;
          }
          
          if (derived5.type !== null && derived5.type !== undefined) {
            authenticationValue2['type'] = derived5.type !== null && derived5.type !== undefined ? derived5.type.toString() : 'NotSpecified';
          }
        }
        if (parameters.action.request.authentication.type === 'Basic') {
          authenticationValue2['type'] = 'Basic';
          var derived6 = parameters.action.request.authentication;
          
          authenticationValue2['username'] = derived6.username;
          
          if (derived6.password !== null && derived6.password !== undefined) {
            authenticationValue2['password'] = derived6.password;
          }
          
          if (derived6.type !== null && derived6.type !== undefined) {
            authenticationValue2['type'] = derived6.type !== null && derived6.type !== undefined ? derived6.type.toString() : 'NotSpecified';
          }
        }
      }
    }
    
    if (parameters.action.queueMessage !== null && parameters.action.queueMessage !== undefined) {
      var queueMessageValue2 = {};
      actionValue['queueMessage'] = queueMessageValue2;
      
      queueMessageValue2['storageAccount'] = parameters.action.queueMessage.storageAccountName;
      
      queueMessageValue2['queueName'] = parameters.action.queueMessage.queueName;
      
      queueMessageValue2['sasToken'] = parameters.action.queueMessage.sasToken;
      
      queueMessageValue2['message'] = parameters.action.queueMessage.message;
    }
    
    if (parameters.recurrence !== null && parameters.recurrence !== undefined) {
      var recurrenceValue = {};
      jobCreateParametersValue['recurrence'] = recurrenceValue;
      
      recurrenceValue['frequency'] = parameters.recurrence.frequency !== null && parameters.recurrence.frequency !== undefined ? parameters.recurrence.frequency.toString() : 'Minute';
      
      if (parameters.recurrence.interval !== null && parameters.recurrence.interval !== undefined) {
        recurrenceValue['interval'] = parameters.recurrence.interval;
      }
      
      if (parameters.recurrence.count !== null && parameters.recurrence.count !== undefined) {
        recurrenceValue['count'] = parameters.recurrence.count;
      }
      
      if (parameters.recurrence.endTime !== null && parameters.recurrence.endTime !== undefined) {
        recurrenceValue['endTime'] = parameters.recurrence.endTime;
      }
      
      if (parameters.recurrence.schedule !== null && parameters.recurrence.schedule !== undefined) {
        var scheduleValue = {};
        recurrenceValue['schedule'] = scheduleValue;
        
        if (parameters.recurrence.schedule.minutes !== null && parameters.recurrence.schedule.minutes !== undefined) {
          var minutesArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < parameters.recurrence.schedule.minutes.length; loweredIndex2 = loweredIndex2 + 1) {
            var minutesItem = parameters.recurrence.schedule.minutes[loweredIndex2];
            minutesArray.push(minutesItem);
          }
          scheduleValue['minutes'] = minutesArray;
        }
        
        if (parameters.recurrence.schedule.hours !== null && parameters.recurrence.schedule.hours !== undefined) {
          var hoursArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < parameters.recurrence.schedule.hours.length; loweredIndex3 = loweredIndex3 + 1) {
            var hoursItem = parameters.recurrence.schedule.hours[loweredIndex3];
            hoursArray.push(hoursItem);
          }
          scheduleValue['hours'] = hoursArray;
        }
        
        if (parameters.recurrence.schedule.days !== null && parameters.recurrence.schedule.days !== undefined) {
          var weekDaysArray = [];
          for (var loweredIndex4 = 0; loweredIndex4 < parameters.recurrence.schedule.days.length; loweredIndex4 = loweredIndex4 + 1) {
            var weekDaysItem = parameters.recurrence.schedule.days[loweredIndex4];
            weekDaysArray.push(weekDaysItem !== null && weekDaysItem !== undefined ? weekDaysItem.toString() : 'Monday');
          }
          scheduleValue['weekDays'] = weekDaysArray;
        }
        
        if (parameters.recurrence.schedule.months !== null && parameters.recurrence.schedule.months !== undefined) {
          var monthsArray = [];
          for (var loweredIndex5 = 0; loweredIndex5 < parameters.recurrence.schedule.months.length; loweredIndex5 = loweredIndex5 + 1) {
            var monthsItem = parameters.recurrence.schedule.months[loweredIndex5];
            monthsArray.push(monthsItem);
          }
          scheduleValue['months'] = monthsArray;
        }
        
        if (parameters.recurrence.schedule.monthDays !== null && parameters.recurrence.schedule.monthDays !== undefined) {
          var monthDaysArray = [];
          for (var loweredIndex6 = 0; loweredIndex6 < parameters.recurrence.schedule.monthDays.length; loweredIndex6 = loweredIndex6 + 1) {
            var monthDaysItem = parameters.recurrence.schedule.monthDays[loweredIndex6];
            monthDaysArray.push(monthDaysItem);
          }
          scheduleValue['monthDays'] = monthDaysArray;
        }
        
        if (parameters.recurrence.schedule.monthlyOccurrences !== null && parameters.recurrence.schedule.monthlyOccurrences !== undefined) {
          var monthlyOccurrencesArray = [];
          for (var loweredIndex7 = 0; loweredIndex7 < parameters.recurrence.schedule.monthlyOccurrences.length; loweredIndex7 = loweredIndex7 + 1) {
            var monthlyOccurrencesItem = parameters.recurrence.schedule.monthlyOccurrences[loweredIndex7];
            var jobScheduleMonthlyOccurrenceValue = {};
            monthlyOccurrencesArray.push(jobScheduleMonthlyOccurrenceValue);
            
            jobScheduleMonthlyOccurrenceValue['day'] = monthlyOccurrencesItem.day !== null && monthlyOccurrencesItem.day !== undefined ? monthlyOccurrencesItem.day.toString() : 'Monday';
            
            if (monthlyOccurrencesItem.occurrence !== null && monthlyOccurrencesItem.occurrence !== undefined) {
              jobScheduleMonthlyOccurrenceValue['occurrence'] = monthlyOccurrencesItem.occurrence;
            }
          }
          scheduleValue['monthlyOccurrences'] = monthlyOccurrencesArray;
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobInstance = {};
          result.job = jobInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            jobInstance.id = idInstance;
          }
          
          var startTimeValue = responseDoc['startTime'];
          if (startTimeValue !== null && startTimeValue !== undefined) {
            var startTimeInstance = startTimeValue;
            jobInstance.startTime = startTimeInstance;
          }
          
          var actionValue2 = responseDoc['action'];
          if (actionValue2 !== null && actionValue2 !== undefined) {
            var actionInstance = {};
            jobInstance.action = actionInstance;
            
            var typeValue = actionValue2['type'];
            if (typeValue !== null && typeValue !== undefined) {
              var typeInstance = typeValue;
              actionInstance.type = typeInstance;
            }
            
            var retryPolicyValue2 = actionValue2['retryPolicy'];
            if (retryPolicyValue2 !== null && retryPolicyValue2 !== undefined) {
              var retryPolicyInstance = {};
              actionInstance.retryPolicy = retryPolicyInstance;
              
              var retryTypeValue = retryPolicyValue2['retryType'];
              if (retryTypeValue !== null && retryTypeValue !== undefined) {
                var retryTypeInstance = retryTypeValue;
                retryPolicyInstance.retryType = retryTypeInstance;
              }
              
              var retryIntervalValue = retryPolicyValue2['retryInterval'];
              if (retryIntervalValue !== null && retryIntervalValue !== undefined) {
                var retryIntervalInstance = moment.duration(retryIntervalValue);
                retryPolicyInstance.retryInterval = retryIntervalInstance;
              }
              
              var retryCountValue = retryPolicyValue2['retryCount'];
              if (retryCountValue !== null && retryCountValue !== undefined) {
                var retryCountInstance = retryCountValue;
                retryPolicyInstance.retryCount = retryCountInstance;
              }
            }
            
            var errorActionValue2 = actionValue2['errorAction'];
            if (errorActionValue2 !== null && errorActionValue2 !== undefined) {
              var errorActionInstance = {};
              actionInstance.errorAction = errorActionInstance;
              
              var typeValue2 = errorActionValue2['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                errorActionInstance.type = typeInstance2;
              }
              
              var requestValue3 = errorActionValue2['request'];
              if (requestValue3 !== null && requestValue3 !== undefined) {
                var requestInstance = { headers: {} };
                errorActionInstance.request = requestInstance;
                
                var uriValue = requestValue3['uri'];
                if (uriValue !== null && uriValue !== undefined) {
                  var uriInstance = uriValue;
                  requestInstance.uri = uriInstance;
                }
                
                var methodValue = requestValue3['method'];
                if (methodValue !== null && methodValue !== undefined) {
                  var methodInstance = methodValue;
                  requestInstance.method = methodInstance;
                }
                
                var headersSequenceElement = requestValue3['headers'];
                if (headersSequenceElement !== null && headersSequenceElement !== undefined) {
                  for (var property in headersSequenceElement) {
                    var headersKey3 = property;
                    var headersValue3 = headersSequenceElement[property];
                    requestInstance.headers[headersKey3] = headersValue3;
                  }
                }
                
                var bodyValue = requestValue3['body'];
                if (bodyValue !== null && bodyValue !== undefined) {
                  var bodyInstance = bodyValue;
                  requestInstance.body = bodyInstance;
                }
                
                var authenticationValue3 = requestValue3['authentication'];
                if (authenticationValue3 !== null && authenticationValue3 !== undefined) {
                  var typeName = authenticationValue3['type'];
                  if (typeName === 'ClientCertificate') {
                    var clientCertAuthenticationInstance = {};
                    
                    var passwordValue = authenticationValue3['password'];
                    if (passwordValue !== null && passwordValue !== undefined) {
                      var passwordInstance = passwordValue;
                      clientCertAuthenticationInstance.password = passwordInstance;
                    }
                    
                    var pfxValue = authenticationValue3['pfx'];
                    if (pfxValue !== null && pfxValue !== undefined) {
                      var pfxInstance = pfxValue;
                      clientCertAuthenticationInstance.pfx = pfxInstance;
                    }
                    
                    var certificateThumbprintValue = authenticationValue3['certificateThumbprint'];
                    if (certificateThumbprintValue !== null && certificateThumbprintValue !== undefined) {
                      var certificateThumbprintInstance = certificateThumbprintValue;
                      clientCertAuthenticationInstance.certificateThumbprint = certificateThumbprintInstance;
                    }
                    
                    var certificateExpirationValue = authenticationValue3['certificateExpiration'];
                    if (certificateExpirationValue !== null && certificateExpirationValue !== undefined) {
                      var certificateExpirationInstance = certificateExpirationValue;
                      clientCertAuthenticationInstance.certificateExpiration = certificateExpirationInstance;
                    }
                    
                    var certificateSubjectNameValue = authenticationValue3['certificateSubjectName'];
                    if (certificateSubjectNameValue !== null && certificateSubjectNameValue !== undefined) {
                      var certificateSubjectNameInstance = certificateSubjectNameValue;
                      clientCertAuthenticationInstance.certificateSubjectName = certificateSubjectNameInstance;
                    }
                    
                    var typeValue3 = authenticationValue3['type'];
                    if (typeValue3 !== null && typeValue3 !== undefined) {
                      var typeInstance3 = typeValue3;
                      clientCertAuthenticationInstance.type = typeInstance3;
                    }
                    requestInstance.authentication = clientCertAuthenticationInstance;
                  }
                  if (typeName === 'ActiveDirectoryOAuth') {
                    var aADOAuthAuthenticationInstance = {};
                    
                    var secretValue = authenticationValue3['secret'];
                    if (secretValue !== null && secretValue !== undefined) {
                      var secretInstance = secretValue;
                      aADOAuthAuthenticationInstance.secret = secretInstance;
                    }
                    
                    var tenantValue = authenticationValue3['tenant'];
                    if (tenantValue !== null && tenantValue !== undefined) {
                      var tenantInstance = tenantValue;
                      aADOAuthAuthenticationInstance.tenant = tenantInstance;
                    }
                    
                    var audienceValue = authenticationValue3['audience'];
                    if (audienceValue !== null && audienceValue !== undefined) {
                      var audienceInstance = audienceValue;
                      aADOAuthAuthenticationInstance.audience = audienceInstance;
                    }
                    
                    var clientIdValue = authenticationValue3['clientId'];
                    if (clientIdValue !== null && clientIdValue !== undefined) {
                      var clientIdInstance = clientIdValue;
                      aADOAuthAuthenticationInstance.clientId = clientIdInstance;
                    }
                    
                    var typeValue4 = authenticationValue3['type'];
                    if (typeValue4 !== null && typeValue4 !== undefined) {
                      var typeInstance4 = typeValue4;
                      aADOAuthAuthenticationInstance.type = typeInstance4;
                    }
                    requestInstance.authentication = aADOAuthAuthenticationInstance;
                  }
                  if (typeName === 'Basic') {
                    var basicAuthenticationInstance = {};
                    
                    var usernameValue = authenticationValue3['username'];
                    if (usernameValue !== null && usernameValue !== undefined) {
                      var usernameInstance = usernameValue;
                      basicAuthenticationInstance.username = usernameInstance;
                    }
                    
                    var passwordValue2 = authenticationValue3['password'];
                    if (passwordValue2 !== null && passwordValue2 !== undefined) {
                      var passwordInstance2 = passwordValue2;
                      basicAuthenticationInstance.password = passwordInstance2;
                    }
                    
                    var typeValue5 = authenticationValue3['type'];
                    if (typeValue5 !== null && typeValue5 !== undefined) {
                      var typeInstance5 = typeValue5;
                      basicAuthenticationInstance.type = typeInstance5;
                    }
                    requestInstance.authentication = basicAuthenticationInstance;
                  }
                }
              }
              
              var queueMessageValue3 = errorActionValue2['queueMessage'];
              if (queueMessageValue3 !== null && queueMessageValue3 !== undefined) {
                var queueMessageInstance = {};
                errorActionInstance.queueMessage = queueMessageInstance;
                
                var storageAccountValue = queueMessageValue3['storageAccount'];
                if (storageAccountValue !== null && storageAccountValue !== undefined) {
                  var storageAccountInstance = storageAccountValue;
                  queueMessageInstance.storageAccountName = storageAccountInstance;
                }
                
                var queueNameValue = queueMessageValue3['queueName'];
                if (queueNameValue !== null && queueNameValue !== undefined) {
                  var queueNameInstance = queueNameValue;
                  queueMessageInstance.queueName = queueNameInstance;
                }
                
                var sasTokenValue = queueMessageValue3['sasToken'];
                if (sasTokenValue !== null && sasTokenValue !== undefined) {
                  var sasTokenInstance = sasTokenValue;
                  queueMessageInstance.sasToken = sasTokenInstance;
                }
                
                var messageValue = queueMessageValue3['message'];
                if (messageValue !== null && messageValue !== undefined) {
                  var messageInstance = messageValue;
                  queueMessageInstance.message = messageInstance;
                }
              }
            }
            
            var requestValue4 = actionValue2['request'];
            if (requestValue4 !== null && requestValue4 !== undefined) {
              var requestInstance2 = { headers: {} };
              actionInstance.request = requestInstance2;
              
              var uriValue2 = requestValue4['uri'];
              if (uriValue2 !== null && uriValue2 !== undefined) {
                var uriInstance2 = uriValue2;
                requestInstance2.uri = uriInstance2;
              }
              
              var methodValue2 = requestValue4['method'];
              if (methodValue2 !== null && methodValue2 !== undefined) {
                var methodInstance2 = methodValue2;
                requestInstance2.method = methodInstance2;
              }
              
              var headersSequenceElement2 = requestValue4['headers'];
              if (headersSequenceElement2 !== null && headersSequenceElement2 !== undefined) {
                for (var property2 in headersSequenceElement2) {
                  var headersKey4 = property2;
                  var headersValue4 = headersSequenceElement2[property2];
                  requestInstance2.headers[headersKey4] = headersValue4;
                }
              }
              
              var bodyValue2 = requestValue4['body'];
              if (bodyValue2 !== null && bodyValue2 !== undefined) {
                var bodyInstance2 = bodyValue2;
                requestInstance2.body = bodyInstance2;
              }
              
              var authenticationValue4 = requestValue4['authentication'];
              if (authenticationValue4 !== null && authenticationValue4 !== undefined) {
                var typeName2 = authenticationValue4['type'];
                if (typeName2 === 'ClientCertificate') {
                  var clientCertAuthenticationInstance2 = {};
                  
                  var passwordValue3 = authenticationValue4['password'];
                  if (passwordValue3 !== null && passwordValue3 !== undefined) {
                    var passwordInstance3 = passwordValue3;
                    clientCertAuthenticationInstance2.password = passwordInstance3;
                  }
                  
                  var pfxValue2 = authenticationValue4['pfx'];
                  if (pfxValue2 !== null && pfxValue2 !== undefined) {
                    var pfxInstance2 = pfxValue2;
                    clientCertAuthenticationInstance2.pfx = pfxInstance2;
                  }
                  
                  var certificateThumbprintValue2 = authenticationValue4['certificateThumbprint'];
                  if (certificateThumbprintValue2 !== null && certificateThumbprintValue2 !== undefined) {
                    var certificateThumbprintInstance2 = certificateThumbprintValue2;
                    clientCertAuthenticationInstance2.certificateThumbprint = certificateThumbprintInstance2;
                  }
                  
                  var certificateExpirationValue2 = authenticationValue4['certificateExpiration'];
                  if (certificateExpirationValue2 !== null && certificateExpirationValue2 !== undefined) {
                    var certificateExpirationInstance2 = certificateExpirationValue2;
                    clientCertAuthenticationInstance2.certificateExpiration = certificateExpirationInstance2;
                  }
                  
                  var certificateSubjectNameValue2 = authenticationValue4['certificateSubjectName'];
                  if (certificateSubjectNameValue2 !== null && certificateSubjectNameValue2 !== undefined) {
                    var certificateSubjectNameInstance2 = certificateSubjectNameValue2;
                    clientCertAuthenticationInstance2.certificateSubjectName = certificateSubjectNameInstance2;
                  }
                  
                  var typeValue6 = authenticationValue4['type'];
                  if (typeValue6 !== null && typeValue6 !== undefined) {
                    var typeInstance6 = typeValue6;
                    clientCertAuthenticationInstance2.type = typeInstance6;
                  }
                  requestInstance2.authentication = clientCertAuthenticationInstance2;
                }
                if (typeName2 === 'ActiveDirectoryOAuth') {
                  var aADOAuthAuthenticationInstance2 = {};
                  
                  var secretValue2 = authenticationValue4['secret'];
                  if (secretValue2 !== null && secretValue2 !== undefined) {
                    var secretInstance2 = secretValue2;
                    aADOAuthAuthenticationInstance2.secret = secretInstance2;
                  }
                  
                  var tenantValue2 = authenticationValue4['tenant'];
                  if (tenantValue2 !== null && tenantValue2 !== undefined) {
                    var tenantInstance2 = tenantValue2;
                    aADOAuthAuthenticationInstance2.tenant = tenantInstance2;
                  }
                  
                  var audienceValue2 = authenticationValue4['audience'];
                  if (audienceValue2 !== null && audienceValue2 !== undefined) {
                    var audienceInstance2 = audienceValue2;
                    aADOAuthAuthenticationInstance2.audience = audienceInstance2;
                  }
                  
                  var clientIdValue2 = authenticationValue4['clientId'];
                  if (clientIdValue2 !== null && clientIdValue2 !== undefined) {
                    var clientIdInstance2 = clientIdValue2;
                    aADOAuthAuthenticationInstance2.clientId = clientIdInstance2;
                  }
                  
                  var typeValue7 = authenticationValue4['type'];
                  if (typeValue7 !== null && typeValue7 !== undefined) {
                    var typeInstance7 = typeValue7;
                    aADOAuthAuthenticationInstance2.type = typeInstance7;
                  }
                  requestInstance2.authentication = aADOAuthAuthenticationInstance2;
                }
                if (typeName2 === 'Basic') {
                  var basicAuthenticationInstance2 = {};
                  
                  var usernameValue2 = authenticationValue4['username'];
                  if (usernameValue2 !== null && usernameValue2 !== undefined) {
                    var usernameInstance2 = usernameValue2;
                    basicAuthenticationInstance2.username = usernameInstance2;
                  }
                  
                  var passwordValue4 = authenticationValue4['password'];
                  if (passwordValue4 !== null && passwordValue4 !== undefined) {
                    var passwordInstance4 = passwordValue4;
                    basicAuthenticationInstance2.password = passwordInstance4;
                  }
                  
                  var typeValue8 = authenticationValue4['type'];
                  if (typeValue8 !== null && typeValue8 !== undefined) {
                    var typeInstance8 = typeValue8;
                    basicAuthenticationInstance2.type = typeInstance8;
                  }
                  requestInstance2.authentication = basicAuthenticationInstance2;
                }
              }
            }
            
            var queueMessageValue4 = actionValue2['queueMessage'];
            if (queueMessageValue4 !== null && queueMessageValue4 !== undefined) {
              var queueMessageInstance2 = {};
              actionInstance.queueMessage = queueMessageInstance2;
              
              var storageAccountValue2 = queueMessageValue4['storageAccount'];
              if (storageAccountValue2 !== null && storageAccountValue2 !== undefined) {
                var storageAccountInstance2 = storageAccountValue2;
                queueMessageInstance2.storageAccountName = storageAccountInstance2;
              }
              
              var queueNameValue2 = queueMessageValue4['queueName'];
              if (queueNameValue2 !== null && queueNameValue2 !== undefined) {
                var queueNameInstance2 = queueNameValue2;
                queueMessageInstance2.queueName = queueNameInstance2;
              }
              
              var sasTokenValue2 = queueMessageValue4['sasToken'];
              if (sasTokenValue2 !== null && sasTokenValue2 !== undefined) {
                var sasTokenInstance2 = sasTokenValue2;
                queueMessageInstance2.sasToken = sasTokenInstance2;
              }
              
              var messageValue2 = queueMessageValue4['message'];
              if (messageValue2 !== null && messageValue2 !== undefined) {
                var messageInstance2 = messageValue2;
                queueMessageInstance2.message = messageInstance2;
              }
            }
          }
          
          var recurrenceValue2 = responseDoc['recurrence'];
          if (recurrenceValue2 !== null && recurrenceValue2 !== undefined) {
            var recurrenceInstance = {};
            jobInstance.recurrence = recurrenceInstance;
            
            var frequencyValue = recurrenceValue2['frequency'];
            if (frequencyValue !== null && frequencyValue !== undefined) {
              var frequencyInstance = frequencyValue;
              recurrenceInstance.frequency = frequencyInstance;
            }
            
            var intervalValue = recurrenceValue2['interval'];
            if (intervalValue !== null && intervalValue !== undefined) {
              var intervalInstance = intervalValue;
              recurrenceInstance.interval = intervalInstance;
            }
            
            var countValue = recurrenceValue2['count'];
            if (countValue !== null && countValue !== undefined) {
              var countInstance = countValue;
              recurrenceInstance.count = countInstance;
            }
            
            var endTimeValue = recurrenceValue2['endTime'];
            if (endTimeValue !== null && endTimeValue !== undefined) {
              var endTimeInstance = endTimeValue;
              recurrenceInstance.endTime = endTimeInstance;
            }
            
            var scheduleValue2 = recurrenceValue2['schedule'];
            if (scheduleValue2 !== null && scheduleValue2 !== undefined) {
              var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
              recurrenceInstance.schedule = scheduleInstance;
              
              var minutesArray2 = scheduleValue2['minutes'];
              if (minutesArray2 !== null && minutesArray2 !== undefined) {
                scheduleInstance.minutes = [];
                for (var loweredIndex8 = 0; loweredIndex8 < minutesArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                  var minutesValue = minutesArray2[loweredIndex8];
                  scheduleInstance.minutes.push(minutesValue);
                }
              }
              
              var hoursArray2 = scheduleValue2['hours'];
              if (hoursArray2 !== null && hoursArray2 !== undefined) {
                scheduleInstance.hours = [];
                for (var loweredIndex9 = 0; loweredIndex9 < hoursArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                  var hoursValue = hoursArray2[loweredIndex9];
                  scheduleInstance.hours.push(hoursValue);
                }
              }
              
              var weekDaysArray2 = scheduleValue2['weekDays'];
              if (weekDaysArray2 !== null && weekDaysArray2 !== undefined) {
                scheduleInstance.days = [];
                for (var loweredIndex10 = 0; loweredIndex10 < weekDaysArray2.length; loweredIndex10 = loweredIndex10 + 1) {
                  var weekDaysValue = weekDaysArray2[loweredIndex10];
                  scheduleInstance.days.push(weekDaysValue);
                }
              }
              
              var monthsArray2 = scheduleValue2['months'];
              if (monthsArray2 !== null && monthsArray2 !== undefined) {
                scheduleInstance.months = [];
                for (var loweredIndex11 = 0; loweredIndex11 < monthsArray2.length; loweredIndex11 = loweredIndex11 + 1) {
                  var monthsValue = monthsArray2[loweredIndex11];
                  scheduleInstance.months.push(monthsValue);
                }
              }
              
              var monthDaysArray2 = scheduleValue2['monthDays'];
              if (monthDaysArray2 !== null && monthDaysArray2 !== undefined) {
                scheduleInstance.monthDays = [];
                for (var loweredIndex12 = 0; loweredIndex12 < monthDaysArray2.length; loweredIndex12 = loweredIndex12 + 1) {
                  var monthDaysValue = monthDaysArray2[loweredIndex12];
                  scheduleInstance.monthDays.push(monthDaysValue);
                }
              }
              
              var monthlyOccurrencesArray2 = scheduleValue2['monthlyOccurrences'];
              if (monthlyOccurrencesArray2 !== null && monthlyOccurrencesArray2 !== undefined) {
                scheduleInstance.monthlyOccurrences = [];
                for (var loweredIndex13 = 0; loweredIndex13 < monthlyOccurrencesArray2.length; loweredIndex13 = loweredIndex13 + 1) {
                  var monthlyOccurrencesValue = monthlyOccurrencesArray2[loweredIndex13];
                  var jobScheduleMonthlyOccurrenceInstance = {};
                  scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                  
                  var dayValue = monthlyOccurrencesValue['day'];
                  if (dayValue !== null && dayValue !== undefined) {
                    var dayInstance = dayValue;
                    jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                  }
                  
                  var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                  if (occurrenceValue !== null && occurrenceValue !== undefined) {
                    var occurrenceInstance = occurrenceValue;
                    jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                  }
                }
              }
            }
          }
          
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = {};
            jobInstance.status = statusInstance;
            
            var lastExecutionTimeValue = statusValue['lastExecutionTime'];
            if (lastExecutionTimeValue !== null && lastExecutionTimeValue !== undefined) {
              var lastExecutionTimeInstance = lastExecutionTimeValue;
              statusInstance.lastExecutionTime = lastExecutionTimeInstance;
            }
            
            var nextExecutionTimeValue = statusValue['nextExecutionTime'];
            if (nextExecutionTimeValue !== null && nextExecutionTimeValue !== undefined) {
              var nextExecutionTimeInstance = nextExecutionTimeValue;
              statusInstance.nextExecutionTime = nextExecutionTimeInstance;
            }
            
            var executionCountValue = statusValue['executionCount'];
            if (executionCountValue !== null && executionCountValue !== undefined) {
              var executionCountInstance = executionCountValue;
              statusInstance.executionCount = executionCountInstance;
            }
            
            var failureCountValue = statusValue['failureCount'];
            if (failureCountValue !== null && failureCountValue !== undefined) {
              var failureCountInstance = failureCountValue;
              statusInstance.failureCount = failureCountInstance;
            }
            
            var faultedCountValue = statusValue['faultedCount'];
            if (faultedCountValue !== null && faultedCountValue !== undefined) {
              var faultedCountInstance = faultedCountValue;
              statusInstance.faultedCount = faultedCountInstance;
            }
          }
          
          var stateValue = responseDoc['state'];
          if (stateValue !== null && stateValue !== undefined) {
            var stateInstance = stateValue;
            jobInstance.state = stateInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates a new Job with a user-provided job id, or updates an existing job,
   * replacing its definition with that specified.
   * 
   * @param {string} jobId Id of the job to create or update.
   * 
   * @param {JobCreateOrUpdateParameters} parameters Parameters specifying the
   * job definition for a CreateOrUpdate Job operation.
   * 
   * @param {date} [parameters.startTime] Start time for the job. Defined as
   * ISO-8601.
   * 
   * @param {JobAction} parameters.action Action to invoke for the job.
   * 
   * @param {JobActionType} parameters.action.type Type of action. Can be one
   * of http, https, storageQueue.
   * 
   * @param {RetryPolicy} [parameters.action.retryPolicy] Retry Policy for the
   * job action.
   * 
   * @param {RetryType} [parameters.action.retryPolicy.retryType]  The Retry
   * Type of the Retry Policy. Can be either 'fixed' or 'none'.
   * 
   * @param {TimeSpan} [parameters.action.retryPolicy.retryInterval] The
   * interval between retries.
   * 
   * @param {number} [parameters.action.retryPolicy.retryCount] Number of times
   * a retry should be attempted.
   * 
   * @param {JobErrorAction} [parameters.action.errorAction] Error Action for
   * the job.
   * 
   * @param {JobActionType} [parameters.action.errorAction.type] Type of
   * action. Can be one of http, https, storageQueue.
   * 
   * @param {JobHttpRequest} [parameters.action.errorAction.request] Request
   * for a http or https action type.
   * 
   * @param {string} [parameters.action.errorAction.request.uri] Gets or sets
   * Uri of the endpoint to invoke.
   * 
   * @param {string} [parameters.action.errorAction.request.method] Gets or
   * sets Http method e.g. GET, PUT, POST, DELETE.
   * 
   * @param {object} [parameters.action.errorAction.request.headers] Gets or
   * sets Header name value pairs to supply with the http/https action.
   * 
   * @param {string} [parameters.action.errorAction.request.body] Gets or sets
   * the request body.
   * 
   * @param {HttpAuthentication}
   * [parameters.action.errorAction.request.authentication] Gets or sets the
   * request authentication.
   * 
   * @param {HttpAuthenticationType}
   * [parameters.action.errorAction.request.authentication.type] Specifies the
   * authentication type
   * 
   * @param {JobQueueMessage} [parameters.action.errorAction.queueMessage]
   * Queue and content for a queue message action type.
   * 
   * @param {string}
   * [parameters.action.errorAction.queueMessage.storageAccountName] Name of
   * the storage account for the queue.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.queueName]
   * Name of the queue to send to.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.sasToken] SAS
   * key for the storage account to send message to the queue.
   * 
   * @param {string} [parameters.action.errorAction.queueMessage.message]
   * Content of the message to send to the queue.
   * 
   * @param {JobHttpRequest} [parameters.action.request] Request for a http or
   * https action type.
   * 
   * @param {string} [parameters.action.request.uri] Gets or sets Uri of the
   * endpoint to invoke.
   * 
   * @param {string} [parameters.action.request.method] Gets or sets Http
   * method e.g. GET, PUT, POST, DELETE.
   * 
   * @param {object} [parameters.action.request.headers] Gets or sets Header
   * name value pairs to supply with the http/https action.
   * 
   * @param {string} [parameters.action.request.body] Gets or sets the request
   * body.
   * 
   * @param {HttpAuthentication} [parameters.action.request.authentication]
   * Gets or sets the request authentication.
   * 
   * @param {HttpAuthenticationType}
   * [parameters.action.request.authentication.type] Specifies the
   * authentication type
   * 
   * @param {JobQueueMessage} [parameters.action.queueMessage] Queue and
   * content for a queue message action type.
   * 
   * @param {string} [parameters.action.queueMessage.storageAccountName] Name
   * of the storage account for the queue.
   * 
   * @param {string} [parameters.action.queueMessage.queueName] Name of the
   * queue to send to.
   * 
   * @param {string} [parameters.action.queueMessage.sasToken] SAS key for the
   * storage account to send message to the queue.
   * 
   * @param {string} [parameters.action.queueMessage.message] Content of the
   * message to send to the queue.
   * 
   * @param {JobRecurrence} [parameters.recurrence] Recurrence schedule for the
   * job.
   * 
   * @param {JobRecurrenceFrequency} [parameters.recurrence.frequency] The
   * frequency of recurrence.
   * 
   * @param {number} [parameters.recurrence.interval] Interval of the
   * recurrence at the given frequency.
   * 
   * @param {number} [parameters.recurrence.count] Count of occurrences that
   * will execute. Optional. Default will recur infinitely
   * 
   * @param {date} [parameters.recurrence.endTime] Time in ISO-8601 format
   * after which no more occurrences will execute.
   * 
   * @param {JobRecurrenceSchedule} [parameters.recurrence.schedule] Recurrence
   * schedule for the job.
   * 
   * @param {array} [parameters.recurrence.schedule.minutes] Minutes of the
   * hour that the job should execute at.
   * 
   * @param {array} [parameters.recurrence.schedule.hours] Hours of the day
   * that the job should execute at.
   * 
   * @param {array} [parameters.recurrence.schedule.days] Days of the week that
   * the job should execute on.
   * 
   * @param {array} [parameters.recurrence.schedule.months] Months that the job
   * should execute in.  Must be between 1 and 12.
   * 
   * @param {array} [parameters.recurrence.schedule.monthDays] Days of the
   * month that the job should execute on.  Must be between 1 and 31.
   * 
   * @param {array} [parameters.recurrence.schedule.monthlyOccurrences]
   * Occurrences of days within a month.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.createOrUpdate = function(jobId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.action === null || parameters.action === undefined) {
      return callback(new Error('parameters.action cannot be null.'));
    }
    if (parameters.action.errorAction !== null && parameters.action.errorAction !== undefined) {
      if (parameters.action.errorAction.queueMessage !== null && parameters.action.errorAction.queueMessage !== undefined) {
        if (parameters.action.errorAction.queueMessage.message === null || parameters.action.errorAction.queueMessage.message === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.message cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.queueName === null || parameters.action.errorAction.queueMessage.queueName === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.queueName cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.sasToken === null || parameters.action.errorAction.queueMessage.sasToken === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.sasToken cannot be null.'));
        }
        if (parameters.action.errorAction.queueMessage.storageAccountName === null || parameters.action.errorAction.queueMessage.storageAccountName === undefined) {
          return callback(new Error('parameters.action.errorAction.queueMessage.storageAccountName cannot be null.'));
        }
      }
      if (parameters.action.errorAction.request !== null && parameters.action.errorAction.request !== undefined) {
        if (parameters.action.errorAction.request.method === null || parameters.action.errorAction.request.method === undefined) {
          return callback(new Error('parameters.action.errorAction.request.method cannot be null.'));
        }
        if (parameters.action.errorAction.request.uri === null || parameters.action.errorAction.request.uri === undefined) {
          return callback(new Error('parameters.action.errorAction.request.uri cannot be null.'));
        }
      }
      if (parameters.action.errorAction.type === null || parameters.action.errorAction.type === undefined) {
        return callback(new Error('parameters.action.errorAction.type cannot be null.'));
      }
    }
    if (parameters.action.queueMessage !== null && parameters.action.queueMessage !== undefined) {
      if (parameters.action.queueMessage.message === null || parameters.action.queueMessage.message === undefined) {
        return callback(new Error('parameters.action.queueMessage.message cannot be null.'));
      }
      if (parameters.action.queueMessage.queueName === null || parameters.action.queueMessage.queueName === undefined) {
        return callback(new Error('parameters.action.queueMessage.queueName cannot be null.'));
      }
      if (parameters.action.queueMessage.sasToken === null || parameters.action.queueMessage.sasToken === undefined) {
        return callback(new Error('parameters.action.queueMessage.sasToken cannot be null.'));
      }
      if (parameters.action.queueMessage.storageAccountName === null || parameters.action.queueMessage.storageAccountName === undefined) {
        return callback(new Error('parameters.action.queueMessage.storageAccountName cannot be null.'));
      }
    }
    if (parameters.action.request !== null && parameters.action.request !== undefined) {
      if (parameters.action.request.method === null || parameters.action.request.method === undefined) {
        return callback(new Error('parameters.action.request.method cannot be null.'));
      }
      if (parameters.action.request.uri === null || parameters.action.request.uri === undefined) {
        return callback(new Error('parameters.action.request.uri cannot be null.'));
      }
    }
    if (parameters.action.retryPolicy !== null && parameters.action.retryPolicy !== undefined) {
      if (parameters.action.retryPolicy.retryType === null || parameters.action.retryPolicy.retryType === undefined) {
        return callback(new Error('parameters.action.retryPolicy.retryType cannot be null.'));
      }
    }
    if (parameters.action.type === null || parameters.action.type === undefined) {
      return callback(new Error('parameters.action.type cannot be null.'));
    }
    if (parameters.recurrence !== null && parameters.recurrence !== undefined) {
      if (parameters.recurrence.frequency === null || parameters.recurrence.frequency === undefined) {
        return callback(new Error('parameters.recurrence.frequency cannot be null.'));
      }
      if (parameters.recurrence.schedule !== null && parameters.recurrence.schedule !== undefined) {
        if (parameters.recurrence.schedule.monthlyOccurrences !== null && parameters.recurrence.schedule.monthlyOccurrences !== undefined) {
          for (var loweredIndex1 = 0; loweredIndex1 < parameters.recurrence.schedule.monthlyOccurrences.length; loweredIndex1 = loweredIndex1 + 1) {
            var monthlyOccurrencesParameterItem = parameters.recurrence.schedule.monthlyOccurrences[loweredIndex1];
            if (monthlyOccurrencesParameterItem.day === null || monthlyOccurrencesParameterItem.day === undefined) {
              return callback(new Error('parameters.recurrence.schedule.monthlyOccurrences.day cannot be null.'));
            }
          }
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs/';
    url2 = url2 + encodeURIComponent(jobId);
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobCreateOrUpdateParametersValue = {};
    requestDoc = jobCreateOrUpdateParametersValue;
    
    if (parameters.startTime !== null && parameters.startTime !== undefined) {
      jobCreateOrUpdateParametersValue['startTime'] = parameters.startTime;
    }
    
    var actionValue = {};
    jobCreateOrUpdateParametersValue['action'] = actionValue;
    
    actionValue['type'] = parameters.action.type !== null && parameters.action.type !== undefined ? parameters.action.type.toString() : 'Http';
    
    if (parameters.action.retryPolicy !== null && parameters.action.retryPolicy !== undefined) {
      var retryPolicyValue = {};
      actionValue['retryPolicy'] = retryPolicyValue;
      
      retryPolicyValue['retryType'] = parameters.action.retryPolicy.retryType !== null && parameters.action.retryPolicy.retryType !== undefined ? parameters.action.retryPolicy.retryType.toString() : 'None';
      
      if (parameters.action.retryPolicy.retryInterval !== null && parameters.action.retryPolicy.retryInterval !== undefined) {
        retryPolicyValue['retryInterval'] = parameters.action.retryPolicy.retryInterval.toIsoString();
      }
      
      if (parameters.action.retryPolicy.retryCount !== null && parameters.action.retryPolicy.retryCount !== undefined) {
        retryPolicyValue['retryCount'] = parameters.action.retryPolicy.retryCount;
      }
    }
    
    if (parameters.action.errorAction !== null && parameters.action.errorAction !== undefined) {
      var errorActionValue = {};
      actionValue['errorAction'] = errorActionValue;
      
      errorActionValue['type'] = parameters.action.errorAction.type !== null && parameters.action.errorAction.type !== undefined ? parameters.action.errorAction.type.toString() : 'Http';
      
      if (parameters.action.errorAction.request !== null && parameters.action.errorAction.request !== undefined) {
        var requestValue = {};
        errorActionValue['request'] = requestValue;
        
        requestValue['uri'] = parameters.action.errorAction.request.uri;
        
        requestValue['method'] = parameters.action.errorAction.request.method;
        
        if (parameters.action.errorAction.request.headers !== null && parameters.action.errorAction.request.headers !== undefined) {
          var headersDictionary = {};
          for (var headersKey in parameters.action.errorAction.request.headers) {
            var headersValue = parameters.action.errorAction.request.headers[headersKey];
            headersDictionary[headersKey] = headersValue;
          }
          requestValue['headers'] = headersDictionary;
        }
        
        if (parameters.action.errorAction.request.body !== null && parameters.action.errorAction.request.body !== undefined) {
          requestValue['body'] = parameters.action.errorAction.request.body;
        }
        
        if (parameters.action.errorAction.request.authentication !== null && parameters.action.errorAction.request.authentication !== undefined) {
          var authenticationValue = {};
          requestValue['authentication'] = authenticationValue;
          if (parameters.action.errorAction.request.authentication.type === 'ClientCertificate') {
            authenticationValue['type'] = 'ClientCertificate';
            var derived = parameters.action.errorAction.request.authentication;
            
            if (derived.password !== null && derived.password !== undefined) {
              authenticationValue['password'] = derived.password;
            }
            
            if (derived.pfx !== null && derived.pfx !== undefined) {
              authenticationValue['pfx'] = derived.pfx;
            }
            
            if (derived.certificateThumbprint !== null && derived.certificateThumbprint !== undefined) {
              authenticationValue['certificateThumbprint'] = derived.certificateThumbprint;
            }
            
            if (derived.certificateExpiration !== null && derived.certificateExpiration !== undefined) {
              authenticationValue['certificateExpiration'] = derived.certificateExpiration;
            }
            
            if (derived.certificateSubjectName !== null && derived.certificateSubjectName !== undefined) {
              authenticationValue['certificateSubjectName'] = derived.certificateSubjectName;
            }
            
            if (derived.type !== null && derived.type !== undefined) {
              authenticationValue['type'] = derived.type !== null && derived.type !== undefined ? derived.type.toString() : 'NotSpecified';
            }
          }
          if (parameters.action.errorAction.request.authentication.type === 'ActiveDirectoryOAuth') {
            authenticationValue['type'] = 'ActiveDirectoryOAuth';
            var derived2 = parameters.action.errorAction.request.authentication;
            
            if (derived2.secret !== null && derived2.secret !== undefined) {
              authenticationValue['secret'] = derived2.secret;
            }
            
            if (derived2.tenant !== null && derived2.tenant !== undefined) {
              authenticationValue['tenant'] = derived2.tenant;
            }
            
            if (derived2.audience !== null && derived2.audience !== undefined) {
              authenticationValue['audience'] = derived2.audience;
            }
            
            if (derived2.clientId !== null && derived2.clientId !== undefined) {
              authenticationValue['clientId'] = derived2.clientId;
            }
            
            if (derived2.type !== null && derived2.type !== undefined) {
              authenticationValue['type'] = derived2.type !== null && derived2.type !== undefined ? derived2.type.toString() : 'NotSpecified';
            }
          }
          if (parameters.action.errorAction.request.authentication.type === 'Basic') {
            authenticationValue['type'] = 'Basic';
            var derived3 = parameters.action.errorAction.request.authentication;
            
            authenticationValue['username'] = derived3.username;
            
            if (derived3.password !== null && derived3.password !== undefined) {
              authenticationValue['password'] = derived3.password;
            }
            
            if (derived3.type !== null && derived3.type !== undefined) {
              authenticationValue['type'] = derived3.type !== null && derived3.type !== undefined ? derived3.type.toString() : 'NotSpecified';
            }
          }
        }
      }
      
      if (parameters.action.errorAction.queueMessage !== null && parameters.action.errorAction.queueMessage !== undefined) {
        var queueMessageValue = {};
        errorActionValue['queueMessage'] = queueMessageValue;
        
        queueMessageValue['storageAccount'] = parameters.action.errorAction.queueMessage.storageAccountName;
        
        queueMessageValue['queueName'] = parameters.action.errorAction.queueMessage.queueName;
        
        queueMessageValue['sasToken'] = parameters.action.errorAction.queueMessage.sasToken;
        
        queueMessageValue['message'] = parameters.action.errorAction.queueMessage.message;
      }
    }
    
    if (parameters.action.request !== null && parameters.action.request !== undefined) {
      var requestValue2 = {};
      actionValue['request'] = requestValue2;
      
      requestValue2['uri'] = parameters.action.request.uri;
      
      requestValue2['method'] = parameters.action.request.method;
      
      if (parameters.action.request.headers !== null && parameters.action.request.headers !== undefined) {
        var headersDictionary2 = {};
        for (var headersKey2 in parameters.action.request.headers) {
          var headersValue2 = parameters.action.request.headers[headersKey2];
          headersDictionary2[headersKey2] = headersValue2;
        }
        requestValue2['headers'] = headersDictionary2;
      }
      
      if (parameters.action.request.body !== null && parameters.action.request.body !== undefined) {
        requestValue2['body'] = parameters.action.request.body;
      }
      
      if (parameters.action.request.authentication !== null && parameters.action.request.authentication !== undefined) {
        var authenticationValue2 = {};
        requestValue2['authentication'] = authenticationValue2;
        if (parameters.action.request.authentication.type === 'ClientCertificate') {
          authenticationValue2['type'] = 'ClientCertificate';
          var derived4 = parameters.action.request.authentication;
          
          if (derived4.password !== null && derived4.password !== undefined) {
            authenticationValue2['password'] = derived4.password;
          }
          
          if (derived4.pfx !== null && derived4.pfx !== undefined) {
            authenticationValue2['pfx'] = derived4.pfx;
          }
          
          if (derived4.certificateThumbprint !== null && derived4.certificateThumbprint !== undefined) {
            authenticationValue2['certificateThumbprint'] = derived4.certificateThumbprint;
          }
          
          if (derived4.certificateExpiration !== null && derived4.certificateExpiration !== undefined) {
            authenticationValue2['certificateExpiration'] = derived4.certificateExpiration;
          }
          
          if (derived4.certificateSubjectName !== null && derived4.certificateSubjectName !== undefined) {
            authenticationValue2['certificateSubjectName'] = derived4.certificateSubjectName;
          }
          
          if (derived4.type !== null && derived4.type !== undefined) {
            authenticationValue2['type'] = derived4.type !== null && derived4.type !== undefined ? derived4.type.toString() : 'NotSpecified';
          }
        }
        if (parameters.action.request.authentication.type === 'ActiveDirectoryOAuth') {
          authenticationValue2['type'] = 'ActiveDirectoryOAuth';
          var derived5 = parameters.action.request.authentication;
          
          if (derived5.secret !== null && derived5.secret !== undefined) {
            authenticationValue2['secret'] = derived5.secret;
          }
          
          if (derived5.tenant !== null && derived5.tenant !== undefined) {
            authenticationValue2['tenant'] = derived5.tenant;
          }
          
          if (derived5.audience !== null && derived5.audience !== undefined) {
            authenticationValue2['audience'] = derived5.audience;
          }
          
          if (derived5.clientId !== null && derived5.clientId !== undefined) {
            authenticationValue2['clientId'] = derived5.clientId;
          }
          
          if (derived5.type !== null && derived5.type !== undefined) {
            authenticationValue2['type'] = derived5.type !== null && derived5.type !== undefined ? derived5.type.toString() : 'NotSpecified';
          }
        }
        if (parameters.action.request.authentication.type === 'Basic') {
          authenticationValue2['type'] = 'Basic';
          var derived6 = parameters.action.request.authentication;
          
          authenticationValue2['username'] = derived6.username;
          
          if (derived6.password !== null && derived6.password !== undefined) {
            authenticationValue2['password'] = derived6.password;
          }
          
          if (derived6.type !== null && derived6.type !== undefined) {
            authenticationValue2['type'] = derived6.type !== null && derived6.type !== undefined ? derived6.type.toString() : 'NotSpecified';
          }
        }
      }
    }
    
    if (parameters.action.queueMessage !== null && parameters.action.queueMessage !== undefined) {
      var queueMessageValue2 = {};
      actionValue['queueMessage'] = queueMessageValue2;
      
      queueMessageValue2['storageAccount'] = parameters.action.queueMessage.storageAccountName;
      
      queueMessageValue2['queueName'] = parameters.action.queueMessage.queueName;
      
      queueMessageValue2['sasToken'] = parameters.action.queueMessage.sasToken;
      
      queueMessageValue2['message'] = parameters.action.queueMessage.message;
    }
    
    if (parameters.recurrence !== null && parameters.recurrence !== undefined) {
      var recurrenceValue = {};
      jobCreateOrUpdateParametersValue['recurrence'] = recurrenceValue;
      
      recurrenceValue['frequency'] = parameters.recurrence.frequency !== null && parameters.recurrence.frequency !== undefined ? parameters.recurrence.frequency.toString() : 'Minute';
      
      if (parameters.recurrence.interval !== null && parameters.recurrence.interval !== undefined) {
        recurrenceValue['interval'] = parameters.recurrence.interval;
      }
      
      if (parameters.recurrence.count !== null && parameters.recurrence.count !== undefined) {
        recurrenceValue['count'] = parameters.recurrence.count;
      }
      
      if (parameters.recurrence.endTime !== null && parameters.recurrence.endTime !== undefined) {
        recurrenceValue['endTime'] = parameters.recurrence.endTime;
      }
      
      if (parameters.recurrence.schedule !== null && parameters.recurrence.schedule !== undefined) {
        var scheduleValue = {};
        recurrenceValue['schedule'] = scheduleValue;
        
        if (parameters.recurrence.schedule.minutes !== null && parameters.recurrence.schedule.minutes !== undefined) {
          var minutesArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < parameters.recurrence.schedule.minutes.length; loweredIndex2 = loweredIndex2 + 1) {
            var minutesItem = parameters.recurrence.schedule.minutes[loweredIndex2];
            minutesArray.push(minutesItem);
          }
          scheduleValue['minutes'] = minutesArray;
        }
        
        if (parameters.recurrence.schedule.hours !== null && parameters.recurrence.schedule.hours !== undefined) {
          var hoursArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < parameters.recurrence.schedule.hours.length; loweredIndex3 = loweredIndex3 + 1) {
            var hoursItem = parameters.recurrence.schedule.hours[loweredIndex3];
            hoursArray.push(hoursItem);
          }
          scheduleValue['hours'] = hoursArray;
        }
        
        if (parameters.recurrence.schedule.days !== null && parameters.recurrence.schedule.days !== undefined) {
          var weekDaysArray = [];
          for (var loweredIndex4 = 0; loweredIndex4 < parameters.recurrence.schedule.days.length; loweredIndex4 = loweredIndex4 + 1) {
            var weekDaysItem = parameters.recurrence.schedule.days[loweredIndex4];
            weekDaysArray.push(weekDaysItem !== null && weekDaysItem !== undefined ? weekDaysItem.toString() : 'Monday');
          }
          scheduleValue['weekDays'] = weekDaysArray;
        }
        
        if (parameters.recurrence.schedule.months !== null && parameters.recurrence.schedule.months !== undefined) {
          var monthsArray = [];
          for (var loweredIndex5 = 0; loweredIndex5 < parameters.recurrence.schedule.months.length; loweredIndex5 = loweredIndex5 + 1) {
            var monthsItem = parameters.recurrence.schedule.months[loweredIndex5];
            monthsArray.push(monthsItem);
          }
          scheduleValue['months'] = monthsArray;
        }
        
        if (parameters.recurrence.schedule.monthDays !== null && parameters.recurrence.schedule.monthDays !== undefined) {
          var monthDaysArray = [];
          for (var loweredIndex6 = 0; loweredIndex6 < parameters.recurrence.schedule.monthDays.length; loweredIndex6 = loweredIndex6 + 1) {
            var monthDaysItem = parameters.recurrence.schedule.monthDays[loweredIndex6];
            monthDaysArray.push(monthDaysItem);
          }
          scheduleValue['monthDays'] = monthDaysArray;
        }
        
        if (parameters.recurrence.schedule.monthlyOccurrences !== null && parameters.recurrence.schedule.monthlyOccurrences !== undefined) {
          var monthlyOccurrencesArray = [];
          for (var loweredIndex7 = 0; loweredIndex7 < parameters.recurrence.schedule.monthlyOccurrences.length; loweredIndex7 = loweredIndex7 + 1) {
            var monthlyOccurrencesItem = parameters.recurrence.schedule.monthlyOccurrences[loweredIndex7];
            var jobScheduleMonthlyOccurrenceValue = {};
            monthlyOccurrencesArray.push(jobScheduleMonthlyOccurrenceValue);
            
            jobScheduleMonthlyOccurrenceValue['day'] = monthlyOccurrencesItem.day !== null && monthlyOccurrencesItem.day !== undefined ? monthlyOccurrencesItem.day.toString() : 'Monday';
            
            if (monthlyOccurrencesItem.occurrence !== null && monthlyOccurrencesItem.occurrence !== undefined) {
              jobScheduleMonthlyOccurrenceValue['occurrence'] = monthlyOccurrencesItem.occurrence;
            }
          }
          scheduleValue['monthlyOccurrences'] = monthlyOccurrencesArray;
        }
      }
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobInstance = {};
          result.job = jobInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            jobInstance.id = idInstance;
          }
          
          var startTimeValue = responseDoc['startTime'];
          if (startTimeValue !== null && startTimeValue !== undefined) {
            var startTimeInstance = startTimeValue;
            jobInstance.startTime = startTimeInstance;
          }
          
          var actionValue2 = responseDoc['action'];
          if (actionValue2 !== null && actionValue2 !== undefined) {
            var actionInstance = {};
            jobInstance.action = actionInstance;
            
            var typeValue = actionValue2['type'];
            if (typeValue !== null && typeValue !== undefined) {
              var typeInstance = typeValue;
              actionInstance.type = typeInstance;
            }
            
            var retryPolicyValue2 = actionValue2['retryPolicy'];
            if (retryPolicyValue2 !== null && retryPolicyValue2 !== undefined) {
              var retryPolicyInstance = {};
              actionInstance.retryPolicy = retryPolicyInstance;
              
              var retryTypeValue = retryPolicyValue2['retryType'];
              if (retryTypeValue !== null && retryTypeValue !== undefined) {
                var retryTypeInstance = retryTypeValue;
                retryPolicyInstance.retryType = retryTypeInstance;
              }
              
              var retryIntervalValue = retryPolicyValue2['retryInterval'];
              if (retryIntervalValue !== null && retryIntervalValue !== undefined) {
                var retryIntervalInstance = moment.duration(retryIntervalValue);
                retryPolicyInstance.retryInterval = retryIntervalInstance;
              }
              
              var retryCountValue = retryPolicyValue2['retryCount'];
              if (retryCountValue !== null && retryCountValue !== undefined) {
                var retryCountInstance = retryCountValue;
                retryPolicyInstance.retryCount = retryCountInstance;
              }
            }
            
            var errorActionValue2 = actionValue2['errorAction'];
            if (errorActionValue2 !== null && errorActionValue2 !== undefined) {
              var errorActionInstance = {};
              actionInstance.errorAction = errorActionInstance;
              
              var typeValue2 = errorActionValue2['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                errorActionInstance.type = typeInstance2;
              }
              
              var requestValue3 = errorActionValue2['request'];
              if (requestValue3 !== null && requestValue3 !== undefined) {
                var requestInstance = { headers: {} };
                errorActionInstance.request = requestInstance;
                
                var uriValue = requestValue3['uri'];
                if (uriValue !== null && uriValue !== undefined) {
                  var uriInstance = uriValue;
                  requestInstance.uri = uriInstance;
                }
                
                var methodValue = requestValue3['method'];
                if (methodValue !== null && methodValue !== undefined) {
                  var methodInstance = methodValue;
                  requestInstance.method = methodInstance;
                }
                
                var headersSequenceElement = requestValue3['headers'];
                if (headersSequenceElement !== null && headersSequenceElement !== undefined) {
                  for (var property in headersSequenceElement) {
                    var headersKey3 = property;
                    var headersValue3 = headersSequenceElement[property];
                    requestInstance.headers[headersKey3] = headersValue3;
                  }
                }
                
                var bodyValue = requestValue3['body'];
                if (bodyValue !== null && bodyValue !== undefined) {
                  var bodyInstance = bodyValue;
                  requestInstance.body = bodyInstance;
                }
                
                var authenticationValue3 = requestValue3['authentication'];
                if (authenticationValue3 !== null && authenticationValue3 !== undefined) {
                  var typeName = authenticationValue3['type'];
                  if (typeName === 'ClientCertificate') {
                    var clientCertAuthenticationInstance = {};
                    
                    var passwordValue = authenticationValue3['password'];
                    if (passwordValue !== null && passwordValue !== undefined) {
                      var passwordInstance = passwordValue;
                      clientCertAuthenticationInstance.password = passwordInstance;
                    }
                    
                    var pfxValue = authenticationValue3['pfx'];
                    if (pfxValue !== null && pfxValue !== undefined) {
                      var pfxInstance = pfxValue;
                      clientCertAuthenticationInstance.pfx = pfxInstance;
                    }
                    
                    var certificateThumbprintValue = authenticationValue3['certificateThumbprint'];
                    if (certificateThumbprintValue !== null && certificateThumbprintValue !== undefined) {
                      var certificateThumbprintInstance = certificateThumbprintValue;
                      clientCertAuthenticationInstance.certificateThumbprint = certificateThumbprintInstance;
                    }
                    
                    var certificateExpirationValue = authenticationValue3['certificateExpiration'];
                    if (certificateExpirationValue !== null && certificateExpirationValue !== undefined) {
                      var certificateExpirationInstance = certificateExpirationValue;
                      clientCertAuthenticationInstance.certificateExpiration = certificateExpirationInstance;
                    }
                    
                    var certificateSubjectNameValue = authenticationValue3['certificateSubjectName'];
                    if (certificateSubjectNameValue !== null && certificateSubjectNameValue !== undefined) {
                      var certificateSubjectNameInstance = certificateSubjectNameValue;
                      clientCertAuthenticationInstance.certificateSubjectName = certificateSubjectNameInstance;
                    }
                    
                    var typeValue3 = authenticationValue3['type'];
                    if (typeValue3 !== null && typeValue3 !== undefined) {
                      var typeInstance3 = typeValue3;
                      clientCertAuthenticationInstance.type = typeInstance3;
                    }
                    requestInstance.authentication = clientCertAuthenticationInstance;
                  }
                  if (typeName === 'ActiveDirectoryOAuth') {
                    var aADOAuthAuthenticationInstance = {};
                    
                    var secretValue = authenticationValue3['secret'];
                    if (secretValue !== null && secretValue !== undefined) {
                      var secretInstance = secretValue;
                      aADOAuthAuthenticationInstance.secret = secretInstance;
                    }
                    
                    var tenantValue = authenticationValue3['tenant'];
                    if (tenantValue !== null && tenantValue !== undefined) {
                      var tenantInstance = tenantValue;
                      aADOAuthAuthenticationInstance.tenant = tenantInstance;
                    }
                    
                    var audienceValue = authenticationValue3['audience'];
                    if (audienceValue !== null && audienceValue !== undefined) {
                      var audienceInstance = audienceValue;
                      aADOAuthAuthenticationInstance.audience = audienceInstance;
                    }
                    
                    var clientIdValue = authenticationValue3['clientId'];
                    if (clientIdValue !== null && clientIdValue !== undefined) {
                      var clientIdInstance = clientIdValue;
                      aADOAuthAuthenticationInstance.clientId = clientIdInstance;
                    }
                    
                    var typeValue4 = authenticationValue3['type'];
                    if (typeValue4 !== null && typeValue4 !== undefined) {
                      var typeInstance4 = typeValue4;
                      aADOAuthAuthenticationInstance.type = typeInstance4;
                    }
                    requestInstance.authentication = aADOAuthAuthenticationInstance;
                  }
                  if (typeName === 'Basic') {
                    var basicAuthenticationInstance = {};
                    
                    var usernameValue = authenticationValue3['username'];
                    if (usernameValue !== null && usernameValue !== undefined) {
                      var usernameInstance = usernameValue;
                      basicAuthenticationInstance.username = usernameInstance;
                    }
                    
                    var passwordValue2 = authenticationValue3['password'];
                    if (passwordValue2 !== null && passwordValue2 !== undefined) {
                      var passwordInstance2 = passwordValue2;
                      basicAuthenticationInstance.password = passwordInstance2;
                    }
                    
                    var typeValue5 = authenticationValue3['type'];
                    if (typeValue5 !== null && typeValue5 !== undefined) {
                      var typeInstance5 = typeValue5;
                      basicAuthenticationInstance.type = typeInstance5;
                    }
                    requestInstance.authentication = basicAuthenticationInstance;
                  }
                }
              }
              
              var queueMessageValue3 = errorActionValue2['queueMessage'];
              if (queueMessageValue3 !== null && queueMessageValue3 !== undefined) {
                var queueMessageInstance = {};
                errorActionInstance.queueMessage = queueMessageInstance;
                
                var storageAccountValue = queueMessageValue3['storageAccount'];
                if (storageAccountValue !== null && storageAccountValue !== undefined) {
                  var storageAccountInstance = storageAccountValue;
                  queueMessageInstance.storageAccountName = storageAccountInstance;
                }
                
                var queueNameValue = queueMessageValue3['queueName'];
                if (queueNameValue !== null && queueNameValue !== undefined) {
                  var queueNameInstance = queueNameValue;
                  queueMessageInstance.queueName = queueNameInstance;
                }
                
                var sasTokenValue = queueMessageValue3['sasToken'];
                if (sasTokenValue !== null && sasTokenValue !== undefined) {
                  var sasTokenInstance = sasTokenValue;
                  queueMessageInstance.sasToken = sasTokenInstance;
                }
                
                var messageValue = queueMessageValue3['message'];
                if (messageValue !== null && messageValue !== undefined) {
                  var messageInstance = messageValue;
                  queueMessageInstance.message = messageInstance;
                }
              }
            }
            
            var requestValue4 = actionValue2['request'];
            if (requestValue4 !== null && requestValue4 !== undefined) {
              var requestInstance2 = { headers: {} };
              actionInstance.request = requestInstance2;
              
              var uriValue2 = requestValue4['uri'];
              if (uriValue2 !== null && uriValue2 !== undefined) {
                var uriInstance2 = uriValue2;
                requestInstance2.uri = uriInstance2;
              }
              
              var methodValue2 = requestValue4['method'];
              if (methodValue2 !== null && methodValue2 !== undefined) {
                var methodInstance2 = methodValue2;
                requestInstance2.method = methodInstance2;
              }
              
              var headersSequenceElement2 = requestValue4['headers'];
              if (headersSequenceElement2 !== null && headersSequenceElement2 !== undefined) {
                for (var property2 in headersSequenceElement2) {
                  var headersKey4 = property2;
                  var headersValue4 = headersSequenceElement2[property2];
                  requestInstance2.headers[headersKey4] = headersValue4;
                }
              }
              
              var bodyValue2 = requestValue4['body'];
              if (bodyValue2 !== null && bodyValue2 !== undefined) {
                var bodyInstance2 = bodyValue2;
                requestInstance2.body = bodyInstance2;
              }
              
              var authenticationValue4 = requestValue4['authentication'];
              if (authenticationValue4 !== null && authenticationValue4 !== undefined) {
                var typeName2 = authenticationValue4['type'];
                if (typeName2 === 'ClientCertificate') {
                  var clientCertAuthenticationInstance2 = {};
                  
                  var passwordValue3 = authenticationValue4['password'];
                  if (passwordValue3 !== null && passwordValue3 !== undefined) {
                    var passwordInstance3 = passwordValue3;
                    clientCertAuthenticationInstance2.password = passwordInstance3;
                  }
                  
                  var pfxValue2 = authenticationValue4['pfx'];
                  if (pfxValue2 !== null && pfxValue2 !== undefined) {
                    var pfxInstance2 = pfxValue2;
                    clientCertAuthenticationInstance2.pfx = pfxInstance2;
                  }
                  
                  var certificateThumbprintValue2 = authenticationValue4['certificateThumbprint'];
                  if (certificateThumbprintValue2 !== null && certificateThumbprintValue2 !== undefined) {
                    var certificateThumbprintInstance2 = certificateThumbprintValue2;
                    clientCertAuthenticationInstance2.certificateThumbprint = certificateThumbprintInstance2;
                  }
                  
                  var certificateExpirationValue2 = authenticationValue4['certificateExpiration'];
                  if (certificateExpirationValue2 !== null && certificateExpirationValue2 !== undefined) {
                    var certificateExpirationInstance2 = certificateExpirationValue2;
                    clientCertAuthenticationInstance2.certificateExpiration = certificateExpirationInstance2;
                  }
                  
                  var certificateSubjectNameValue2 = authenticationValue4['certificateSubjectName'];
                  if (certificateSubjectNameValue2 !== null && certificateSubjectNameValue2 !== undefined) {
                    var certificateSubjectNameInstance2 = certificateSubjectNameValue2;
                    clientCertAuthenticationInstance2.certificateSubjectName = certificateSubjectNameInstance2;
                  }
                  
                  var typeValue6 = authenticationValue4['type'];
                  if (typeValue6 !== null && typeValue6 !== undefined) {
                    var typeInstance6 = typeValue6;
                    clientCertAuthenticationInstance2.type = typeInstance6;
                  }
                  requestInstance2.authentication = clientCertAuthenticationInstance2;
                }
                if (typeName2 === 'ActiveDirectoryOAuth') {
                  var aADOAuthAuthenticationInstance2 = {};
                  
                  var secretValue2 = authenticationValue4['secret'];
                  if (secretValue2 !== null && secretValue2 !== undefined) {
                    var secretInstance2 = secretValue2;
                    aADOAuthAuthenticationInstance2.secret = secretInstance2;
                  }
                  
                  var tenantValue2 = authenticationValue4['tenant'];
                  if (tenantValue2 !== null && tenantValue2 !== undefined) {
                    var tenantInstance2 = tenantValue2;
                    aADOAuthAuthenticationInstance2.tenant = tenantInstance2;
                  }
                  
                  var audienceValue2 = authenticationValue4['audience'];
                  if (audienceValue2 !== null && audienceValue2 !== undefined) {
                    var audienceInstance2 = audienceValue2;
                    aADOAuthAuthenticationInstance2.audience = audienceInstance2;
                  }
                  
                  var clientIdValue2 = authenticationValue4['clientId'];
                  if (clientIdValue2 !== null && clientIdValue2 !== undefined) {
                    var clientIdInstance2 = clientIdValue2;
                    aADOAuthAuthenticationInstance2.clientId = clientIdInstance2;
                  }
                  
                  var typeValue7 = authenticationValue4['type'];
                  if (typeValue7 !== null && typeValue7 !== undefined) {
                    var typeInstance7 = typeValue7;
                    aADOAuthAuthenticationInstance2.type = typeInstance7;
                  }
                  requestInstance2.authentication = aADOAuthAuthenticationInstance2;
                }
                if (typeName2 === 'Basic') {
                  var basicAuthenticationInstance2 = {};
                  
                  var usernameValue2 = authenticationValue4['username'];
                  if (usernameValue2 !== null && usernameValue2 !== undefined) {
                    var usernameInstance2 = usernameValue2;
                    basicAuthenticationInstance2.username = usernameInstance2;
                  }
                  
                  var passwordValue4 = authenticationValue4['password'];
                  if (passwordValue4 !== null && passwordValue4 !== undefined) {
                    var passwordInstance4 = passwordValue4;
                    basicAuthenticationInstance2.password = passwordInstance4;
                  }
                  
                  var typeValue8 = authenticationValue4['type'];
                  if (typeValue8 !== null && typeValue8 !== undefined) {
                    var typeInstance8 = typeValue8;
                    basicAuthenticationInstance2.type = typeInstance8;
                  }
                  requestInstance2.authentication = basicAuthenticationInstance2;
                }
              }
            }
            
            var queueMessageValue4 = actionValue2['queueMessage'];
            if (queueMessageValue4 !== null && queueMessageValue4 !== undefined) {
              var queueMessageInstance2 = {};
              actionInstance.queueMessage = queueMessageInstance2;
              
              var storageAccountValue2 = queueMessageValue4['storageAccount'];
              if (storageAccountValue2 !== null && storageAccountValue2 !== undefined) {
                var storageAccountInstance2 = storageAccountValue2;
                queueMessageInstance2.storageAccountName = storageAccountInstance2;
              }
              
              var queueNameValue2 = queueMessageValue4['queueName'];
              if (queueNameValue2 !== null && queueNameValue2 !== undefined) {
                var queueNameInstance2 = queueNameValue2;
                queueMessageInstance2.queueName = queueNameInstance2;
              }
              
              var sasTokenValue2 = queueMessageValue4['sasToken'];
              if (sasTokenValue2 !== null && sasTokenValue2 !== undefined) {
                var sasTokenInstance2 = sasTokenValue2;
                queueMessageInstance2.sasToken = sasTokenInstance2;
              }
              
              var messageValue2 = queueMessageValue4['message'];
              if (messageValue2 !== null && messageValue2 !== undefined) {
                var messageInstance2 = messageValue2;
                queueMessageInstance2.message = messageInstance2;
              }
            }
          }
          
          var recurrenceValue2 = responseDoc['recurrence'];
          if (recurrenceValue2 !== null && recurrenceValue2 !== undefined) {
            var recurrenceInstance = {};
            jobInstance.recurrence = recurrenceInstance;
            
            var frequencyValue = recurrenceValue2['frequency'];
            if (frequencyValue !== null && frequencyValue !== undefined) {
              var frequencyInstance = frequencyValue;
              recurrenceInstance.frequency = frequencyInstance;
            }
            
            var intervalValue = recurrenceValue2['interval'];
            if (intervalValue !== null && intervalValue !== undefined) {
              var intervalInstance = intervalValue;
              recurrenceInstance.interval = intervalInstance;
            }
            
            var countValue = recurrenceValue2['count'];
            if (countValue !== null && countValue !== undefined) {
              var countInstance = countValue;
              recurrenceInstance.count = countInstance;
            }
            
            var endTimeValue = recurrenceValue2['endTime'];
            if (endTimeValue !== null && endTimeValue !== undefined) {
              var endTimeInstance = endTimeValue;
              recurrenceInstance.endTime = endTimeInstance;
            }
            
            var scheduleValue2 = recurrenceValue2['schedule'];
            if (scheduleValue2 !== null && scheduleValue2 !== undefined) {
              var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
              recurrenceInstance.schedule = scheduleInstance;
              
              var minutesArray2 = scheduleValue2['minutes'];
              if (minutesArray2 !== null && minutesArray2 !== undefined) {
                scheduleInstance.minutes = [];
                for (var loweredIndex8 = 0; loweredIndex8 < minutesArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                  var minutesValue = minutesArray2[loweredIndex8];
                  scheduleInstance.minutes.push(minutesValue);
                }
              }
              
              var hoursArray2 = scheduleValue2['hours'];
              if (hoursArray2 !== null && hoursArray2 !== undefined) {
                scheduleInstance.hours = [];
                for (var loweredIndex9 = 0; loweredIndex9 < hoursArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                  var hoursValue = hoursArray2[loweredIndex9];
                  scheduleInstance.hours.push(hoursValue);
                }
              }
              
              var weekDaysArray2 = scheduleValue2['weekDays'];
              if (weekDaysArray2 !== null && weekDaysArray2 !== undefined) {
                scheduleInstance.days = [];
                for (var loweredIndex10 = 0; loweredIndex10 < weekDaysArray2.length; loweredIndex10 = loweredIndex10 + 1) {
                  var weekDaysValue = weekDaysArray2[loweredIndex10];
                  scheduleInstance.days.push(weekDaysValue);
                }
              }
              
              var monthsArray2 = scheduleValue2['months'];
              if (monthsArray2 !== null && monthsArray2 !== undefined) {
                scheduleInstance.months = [];
                for (var loweredIndex11 = 0; loweredIndex11 < monthsArray2.length; loweredIndex11 = loweredIndex11 + 1) {
                  var monthsValue = monthsArray2[loweredIndex11];
                  scheduleInstance.months.push(monthsValue);
                }
              }
              
              var monthDaysArray2 = scheduleValue2['monthDays'];
              if (monthDaysArray2 !== null && monthDaysArray2 !== undefined) {
                scheduleInstance.monthDays = [];
                for (var loweredIndex12 = 0; loweredIndex12 < monthDaysArray2.length; loweredIndex12 = loweredIndex12 + 1) {
                  var monthDaysValue = monthDaysArray2[loweredIndex12];
                  scheduleInstance.monthDays.push(monthDaysValue);
                }
              }
              
              var monthlyOccurrencesArray2 = scheduleValue2['monthlyOccurrences'];
              if (monthlyOccurrencesArray2 !== null && monthlyOccurrencesArray2 !== undefined) {
                scheduleInstance.monthlyOccurrences = [];
                for (var loweredIndex13 = 0; loweredIndex13 < monthlyOccurrencesArray2.length; loweredIndex13 = loweredIndex13 + 1) {
                  var monthlyOccurrencesValue = monthlyOccurrencesArray2[loweredIndex13];
                  var jobScheduleMonthlyOccurrenceInstance = {};
                  scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                  
                  var dayValue = monthlyOccurrencesValue['day'];
                  if (dayValue !== null && dayValue !== undefined) {
                    var dayInstance = dayValue;
                    jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                  }
                  
                  var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                  if (occurrenceValue !== null && occurrenceValue !== undefined) {
                    var occurrenceInstance = occurrenceValue;
                    jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                  }
                }
              }
            }
          }
          
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = {};
            jobInstance.status = statusInstance;
            
            var lastExecutionTimeValue = statusValue['lastExecutionTime'];
            if (lastExecutionTimeValue !== null && lastExecutionTimeValue !== undefined) {
              var lastExecutionTimeInstance = lastExecutionTimeValue;
              statusInstance.lastExecutionTime = lastExecutionTimeInstance;
            }
            
            var nextExecutionTimeValue = statusValue['nextExecutionTime'];
            if (nextExecutionTimeValue !== null && nextExecutionTimeValue !== undefined) {
              var nextExecutionTimeInstance = nextExecutionTimeValue;
              statusInstance.nextExecutionTime = nextExecutionTimeInstance;
            }
            
            var executionCountValue = statusValue['executionCount'];
            if (executionCountValue !== null && executionCountValue !== undefined) {
              var executionCountInstance = executionCountValue;
              statusInstance.executionCount = executionCountInstance;
            }
            
            var failureCountValue = statusValue['failureCount'];
            if (failureCountValue !== null && failureCountValue !== undefined) {
              var failureCountInstance = failureCountValue;
              statusInstance.failureCount = failureCountInstance;
            }
            
            var faultedCountValue = statusValue['faultedCount'];
            if (faultedCountValue !== null && faultedCountValue !== undefined) {
              var faultedCountInstance = faultedCountValue;
              statusInstance.faultedCount = faultedCountInstance;
            }
          }
          
          var stateValue = responseDoc['state'];
          if (stateValue !== null && stateValue !== undefined) {
            var stateInstance = stateValue;
            jobInstance.state = stateInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes a job.
   * 
   * @param {string} jobId Id of the job to delete.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.deleteMethod = function(jobId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs/';
    url2 = url2 + encodeURIComponent(jobId);
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the definition and status of a job.
   * 
   * @param {string} jobId Id of the job to get.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.get = function(jobId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs/';
    url2 = url2 + encodeURIComponent(jobId);
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobInstance = {};
          result.job = jobInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            jobInstance.id = idInstance;
          }
          
          var startTimeValue = responseDoc['startTime'];
          if (startTimeValue !== null && startTimeValue !== undefined) {
            var startTimeInstance = startTimeValue;
            jobInstance.startTime = startTimeInstance;
          }
          
          var actionValue = responseDoc['action'];
          if (actionValue !== null && actionValue !== undefined) {
            var actionInstance = {};
            jobInstance.action = actionInstance;
            
            var typeValue = actionValue['type'];
            if (typeValue !== null && typeValue !== undefined) {
              var typeInstance = typeValue;
              actionInstance.type = typeInstance;
            }
            
            var retryPolicyValue = actionValue['retryPolicy'];
            if (retryPolicyValue !== null && retryPolicyValue !== undefined) {
              var retryPolicyInstance = {};
              actionInstance.retryPolicy = retryPolicyInstance;
              
              var retryTypeValue = retryPolicyValue['retryType'];
              if (retryTypeValue !== null && retryTypeValue !== undefined) {
                var retryTypeInstance = retryTypeValue;
                retryPolicyInstance.retryType = retryTypeInstance;
              }
              
              var retryIntervalValue = retryPolicyValue['retryInterval'];
              if (retryIntervalValue !== null && retryIntervalValue !== undefined) {
                var retryIntervalInstance = moment.duration(retryIntervalValue);
                retryPolicyInstance.retryInterval = retryIntervalInstance;
              }
              
              var retryCountValue = retryPolicyValue['retryCount'];
              if (retryCountValue !== null && retryCountValue !== undefined) {
                var retryCountInstance = retryCountValue;
                retryPolicyInstance.retryCount = retryCountInstance;
              }
            }
            
            var errorActionValue = actionValue['errorAction'];
            if (errorActionValue !== null && errorActionValue !== undefined) {
              var errorActionInstance = {};
              actionInstance.errorAction = errorActionInstance;
              
              var typeValue2 = errorActionValue['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                errorActionInstance.type = typeInstance2;
              }
              
              var requestValue = errorActionValue['request'];
              if (requestValue !== null && requestValue !== undefined) {
                var requestInstance = { headers: {} };
                errorActionInstance.request = requestInstance;
                
                var uriValue = requestValue['uri'];
                if (uriValue !== null && uriValue !== undefined) {
                  var uriInstance = uriValue;
                  requestInstance.uri = uriInstance;
                }
                
                var methodValue = requestValue['method'];
                if (methodValue !== null && methodValue !== undefined) {
                  var methodInstance = methodValue;
                  requestInstance.method = methodInstance;
                }
                
                var headersSequenceElement = requestValue['headers'];
                if (headersSequenceElement !== null && headersSequenceElement !== undefined) {
                  for (var property in headersSequenceElement) {
                    var headersKey = property;
                    var headersValue = headersSequenceElement[property];
                    requestInstance.headers[headersKey] = headersValue;
                  }
                }
                
                var bodyValue = requestValue['body'];
                if (bodyValue !== null && bodyValue !== undefined) {
                  var bodyInstance = bodyValue;
                  requestInstance.body = bodyInstance;
                }
                
                var authenticationValue = requestValue['authentication'];
                if (authenticationValue !== null && authenticationValue !== undefined) {
                  var typeName = authenticationValue['type'];
                  if (typeName === 'ClientCertificate') {
                    var clientCertAuthenticationInstance = {};
                    
                    var passwordValue = authenticationValue['password'];
                    if (passwordValue !== null && passwordValue !== undefined) {
                      var passwordInstance = passwordValue;
                      clientCertAuthenticationInstance.password = passwordInstance;
                    }
                    
                    var pfxValue = authenticationValue['pfx'];
                    if (pfxValue !== null && pfxValue !== undefined) {
                      var pfxInstance = pfxValue;
                      clientCertAuthenticationInstance.pfx = pfxInstance;
                    }
                    
                    var certificateThumbprintValue = authenticationValue['certificateThumbprint'];
                    if (certificateThumbprintValue !== null && certificateThumbprintValue !== undefined) {
                      var certificateThumbprintInstance = certificateThumbprintValue;
                      clientCertAuthenticationInstance.certificateThumbprint = certificateThumbprintInstance;
                    }
                    
                    var certificateExpirationValue = authenticationValue['certificateExpiration'];
                    if (certificateExpirationValue !== null && certificateExpirationValue !== undefined) {
                      var certificateExpirationInstance = certificateExpirationValue;
                      clientCertAuthenticationInstance.certificateExpiration = certificateExpirationInstance;
                    }
                    
                    var certificateSubjectNameValue = authenticationValue['certificateSubjectName'];
                    if (certificateSubjectNameValue !== null && certificateSubjectNameValue !== undefined) {
                      var certificateSubjectNameInstance = certificateSubjectNameValue;
                      clientCertAuthenticationInstance.certificateSubjectName = certificateSubjectNameInstance;
                    }
                    
                    var typeValue3 = authenticationValue['type'];
                    if (typeValue3 !== null && typeValue3 !== undefined) {
                      var typeInstance3 = typeValue3;
                      clientCertAuthenticationInstance.type = typeInstance3;
                    }
                    requestInstance.authentication = clientCertAuthenticationInstance;
                  }
                  if (typeName === 'ActiveDirectoryOAuth') {
                    var aADOAuthAuthenticationInstance = {};
                    
                    var secretValue = authenticationValue['secret'];
                    if (secretValue !== null && secretValue !== undefined) {
                      var secretInstance = secretValue;
                      aADOAuthAuthenticationInstance.secret = secretInstance;
                    }
                    
                    var tenantValue = authenticationValue['tenant'];
                    if (tenantValue !== null && tenantValue !== undefined) {
                      var tenantInstance = tenantValue;
                      aADOAuthAuthenticationInstance.tenant = tenantInstance;
                    }
                    
                    var audienceValue = authenticationValue['audience'];
                    if (audienceValue !== null && audienceValue !== undefined) {
                      var audienceInstance = audienceValue;
                      aADOAuthAuthenticationInstance.audience = audienceInstance;
                    }
                    
                    var clientIdValue = authenticationValue['clientId'];
                    if (clientIdValue !== null && clientIdValue !== undefined) {
                      var clientIdInstance = clientIdValue;
                      aADOAuthAuthenticationInstance.clientId = clientIdInstance;
                    }
                    
                    var typeValue4 = authenticationValue['type'];
                    if (typeValue4 !== null && typeValue4 !== undefined) {
                      var typeInstance4 = typeValue4;
                      aADOAuthAuthenticationInstance.type = typeInstance4;
                    }
                    requestInstance.authentication = aADOAuthAuthenticationInstance;
                  }
                  if (typeName === 'Basic') {
                    var basicAuthenticationInstance = {};
                    
                    var usernameValue = authenticationValue['username'];
                    if (usernameValue !== null && usernameValue !== undefined) {
                      var usernameInstance = usernameValue;
                      basicAuthenticationInstance.username = usernameInstance;
                    }
                    
                    var passwordValue2 = authenticationValue['password'];
                    if (passwordValue2 !== null && passwordValue2 !== undefined) {
                      var passwordInstance2 = passwordValue2;
                      basicAuthenticationInstance.password = passwordInstance2;
                    }
                    
                    var typeValue5 = authenticationValue['type'];
                    if (typeValue5 !== null && typeValue5 !== undefined) {
                      var typeInstance5 = typeValue5;
                      basicAuthenticationInstance.type = typeInstance5;
                    }
                    requestInstance.authentication = basicAuthenticationInstance;
                  }
                }
              }
              
              var queueMessageValue = errorActionValue['queueMessage'];
              if (queueMessageValue !== null && queueMessageValue !== undefined) {
                var queueMessageInstance = {};
                errorActionInstance.queueMessage = queueMessageInstance;
                
                var storageAccountValue = queueMessageValue['storageAccount'];
                if (storageAccountValue !== null && storageAccountValue !== undefined) {
                  var storageAccountInstance = storageAccountValue;
                  queueMessageInstance.storageAccountName = storageAccountInstance;
                }
                
                var queueNameValue = queueMessageValue['queueName'];
                if (queueNameValue !== null && queueNameValue !== undefined) {
                  var queueNameInstance = queueNameValue;
                  queueMessageInstance.queueName = queueNameInstance;
                }
                
                var sasTokenValue = queueMessageValue['sasToken'];
                if (sasTokenValue !== null && sasTokenValue !== undefined) {
                  var sasTokenInstance = sasTokenValue;
                  queueMessageInstance.sasToken = sasTokenInstance;
                }
                
                var messageValue = queueMessageValue['message'];
                if (messageValue !== null && messageValue !== undefined) {
                  var messageInstance = messageValue;
                  queueMessageInstance.message = messageInstance;
                }
              }
            }
            
            var requestValue2 = actionValue['request'];
            if (requestValue2 !== null && requestValue2 !== undefined) {
              var requestInstance2 = { headers: {} };
              actionInstance.request = requestInstance2;
              
              var uriValue2 = requestValue2['uri'];
              if (uriValue2 !== null && uriValue2 !== undefined) {
                var uriInstance2 = uriValue2;
                requestInstance2.uri = uriInstance2;
              }
              
              var methodValue2 = requestValue2['method'];
              if (methodValue2 !== null && methodValue2 !== undefined) {
                var methodInstance2 = methodValue2;
                requestInstance2.method = methodInstance2;
              }
              
              var headersSequenceElement2 = requestValue2['headers'];
              if (headersSequenceElement2 !== null && headersSequenceElement2 !== undefined) {
                for (var property2 in headersSequenceElement2) {
                  var headersKey2 = property2;
                  var headersValue2 = headersSequenceElement2[property2];
                  requestInstance2.headers[headersKey2] = headersValue2;
                }
              }
              
              var bodyValue2 = requestValue2['body'];
              if (bodyValue2 !== null && bodyValue2 !== undefined) {
                var bodyInstance2 = bodyValue2;
                requestInstance2.body = bodyInstance2;
              }
              
              var authenticationValue2 = requestValue2['authentication'];
              if (authenticationValue2 !== null && authenticationValue2 !== undefined) {
                var typeName2 = authenticationValue2['type'];
                if (typeName2 === 'ClientCertificate') {
                  var clientCertAuthenticationInstance2 = {};
                  
                  var passwordValue3 = authenticationValue2['password'];
                  if (passwordValue3 !== null && passwordValue3 !== undefined) {
                    var passwordInstance3 = passwordValue3;
                    clientCertAuthenticationInstance2.password = passwordInstance3;
                  }
                  
                  var pfxValue2 = authenticationValue2['pfx'];
                  if (pfxValue2 !== null && pfxValue2 !== undefined) {
                    var pfxInstance2 = pfxValue2;
                    clientCertAuthenticationInstance2.pfx = pfxInstance2;
                  }
                  
                  var certificateThumbprintValue2 = authenticationValue2['certificateThumbprint'];
                  if (certificateThumbprintValue2 !== null && certificateThumbprintValue2 !== undefined) {
                    var certificateThumbprintInstance2 = certificateThumbprintValue2;
                    clientCertAuthenticationInstance2.certificateThumbprint = certificateThumbprintInstance2;
                  }
                  
                  var certificateExpirationValue2 = authenticationValue2['certificateExpiration'];
                  if (certificateExpirationValue2 !== null && certificateExpirationValue2 !== undefined) {
                    var certificateExpirationInstance2 = certificateExpirationValue2;
                    clientCertAuthenticationInstance2.certificateExpiration = certificateExpirationInstance2;
                  }
                  
                  var certificateSubjectNameValue2 = authenticationValue2['certificateSubjectName'];
                  if (certificateSubjectNameValue2 !== null && certificateSubjectNameValue2 !== undefined) {
                    var certificateSubjectNameInstance2 = certificateSubjectNameValue2;
                    clientCertAuthenticationInstance2.certificateSubjectName = certificateSubjectNameInstance2;
                  }
                  
                  var typeValue6 = authenticationValue2['type'];
                  if (typeValue6 !== null && typeValue6 !== undefined) {
                    var typeInstance6 = typeValue6;
                    clientCertAuthenticationInstance2.type = typeInstance6;
                  }
                  requestInstance2.authentication = clientCertAuthenticationInstance2;
                }
                if (typeName2 === 'ActiveDirectoryOAuth') {
                  var aADOAuthAuthenticationInstance2 = {};
                  
                  var secretValue2 = authenticationValue2['secret'];
                  if (secretValue2 !== null && secretValue2 !== undefined) {
                    var secretInstance2 = secretValue2;
                    aADOAuthAuthenticationInstance2.secret = secretInstance2;
                  }
                  
                  var tenantValue2 = authenticationValue2['tenant'];
                  if (tenantValue2 !== null && tenantValue2 !== undefined) {
                    var tenantInstance2 = tenantValue2;
                    aADOAuthAuthenticationInstance2.tenant = tenantInstance2;
                  }
                  
                  var audienceValue2 = authenticationValue2['audience'];
                  if (audienceValue2 !== null && audienceValue2 !== undefined) {
                    var audienceInstance2 = audienceValue2;
                    aADOAuthAuthenticationInstance2.audience = audienceInstance2;
                  }
                  
                  var clientIdValue2 = authenticationValue2['clientId'];
                  if (clientIdValue2 !== null && clientIdValue2 !== undefined) {
                    var clientIdInstance2 = clientIdValue2;
                    aADOAuthAuthenticationInstance2.clientId = clientIdInstance2;
                  }
                  
                  var typeValue7 = authenticationValue2['type'];
                  if (typeValue7 !== null && typeValue7 !== undefined) {
                    var typeInstance7 = typeValue7;
                    aADOAuthAuthenticationInstance2.type = typeInstance7;
                  }
                  requestInstance2.authentication = aADOAuthAuthenticationInstance2;
                }
                if (typeName2 === 'Basic') {
                  var basicAuthenticationInstance2 = {};
                  
                  var usernameValue2 = authenticationValue2['username'];
                  if (usernameValue2 !== null && usernameValue2 !== undefined) {
                    var usernameInstance2 = usernameValue2;
                    basicAuthenticationInstance2.username = usernameInstance2;
                  }
                  
                  var passwordValue4 = authenticationValue2['password'];
                  if (passwordValue4 !== null && passwordValue4 !== undefined) {
                    var passwordInstance4 = passwordValue4;
                    basicAuthenticationInstance2.password = passwordInstance4;
                  }
                  
                  var typeValue8 = authenticationValue2['type'];
                  if (typeValue8 !== null && typeValue8 !== undefined) {
                    var typeInstance8 = typeValue8;
                    basicAuthenticationInstance2.type = typeInstance8;
                  }
                  requestInstance2.authentication = basicAuthenticationInstance2;
                }
              }
            }
            
            var queueMessageValue2 = actionValue['queueMessage'];
            if (queueMessageValue2 !== null && queueMessageValue2 !== undefined) {
              var queueMessageInstance2 = {};
              actionInstance.queueMessage = queueMessageInstance2;
              
              var storageAccountValue2 = queueMessageValue2['storageAccount'];
              if (storageAccountValue2 !== null && storageAccountValue2 !== undefined) {
                var storageAccountInstance2 = storageAccountValue2;
                queueMessageInstance2.storageAccountName = storageAccountInstance2;
              }
              
              var queueNameValue2 = queueMessageValue2['queueName'];
              if (queueNameValue2 !== null && queueNameValue2 !== undefined) {
                var queueNameInstance2 = queueNameValue2;
                queueMessageInstance2.queueName = queueNameInstance2;
              }
              
              var sasTokenValue2 = queueMessageValue2['sasToken'];
              if (sasTokenValue2 !== null && sasTokenValue2 !== undefined) {
                var sasTokenInstance2 = sasTokenValue2;
                queueMessageInstance2.sasToken = sasTokenInstance2;
              }
              
              var messageValue2 = queueMessageValue2['message'];
              if (messageValue2 !== null && messageValue2 !== undefined) {
                var messageInstance2 = messageValue2;
                queueMessageInstance2.message = messageInstance2;
              }
            }
          }
          
          var recurrenceValue = responseDoc['recurrence'];
          if (recurrenceValue !== null && recurrenceValue !== undefined) {
            var recurrenceInstance = {};
            jobInstance.recurrence = recurrenceInstance;
            
            var frequencyValue = recurrenceValue['frequency'];
            if (frequencyValue !== null && frequencyValue !== undefined) {
              var frequencyInstance = frequencyValue;
              recurrenceInstance.frequency = frequencyInstance;
            }
            
            var intervalValue = recurrenceValue['interval'];
            if (intervalValue !== null && intervalValue !== undefined) {
              var intervalInstance = intervalValue;
              recurrenceInstance.interval = intervalInstance;
            }
            
            var countValue = recurrenceValue['count'];
            if (countValue !== null && countValue !== undefined) {
              var countInstance = countValue;
              recurrenceInstance.count = countInstance;
            }
            
            var endTimeValue = recurrenceValue['endTime'];
            if (endTimeValue !== null && endTimeValue !== undefined) {
              var endTimeInstance = endTimeValue;
              recurrenceInstance.endTime = endTimeInstance;
            }
            
            var scheduleValue = recurrenceValue['schedule'];
            if (scheduleValue !== null && scheduleValue !== undefined) {
              var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
              recurrenceInstance.schedule = scheduleInstance;
              
              var minutesArray = scheduleValue['minutes'];
              if (minutesArray !== null && minutesArray !== undefined) {
                scheduleInstance.minutes = [];
                for (var loweredIndex1 = 0; loweredIndex1 < minutesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var minutesValue = minutesArray[loweredIndex1];
                  scheduleInstance.minutes.push(minutesValue);
                }
              }
              
              var hoursArray = scheduleValue['hours'];
              if (hoursArray !== null && hoursArray !== undefined) {
                scheduleInstance.hours = [];
                for (var loweredIndex2 = 0; loweredIndex2 < hoursArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var hoursValue = hoursArray[loweredIndex2];
                  scheduleInstance.hours.push(hoursValue);
                }
              }
              
              var weekDaysArray = scheduleValue['weekDays'];
              if (weekDaysArray !== null && weekDaysArray !== undefined) {
                scheduleInstance.days = [];
                for (var loweredIndex3 = 0; loweredIndex3 < weekDaysArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var weekDaysValue = weekDaysArray[loweredIndex3];
                  scheduleInstance.days.push(weekDaysValue);
                }
              }
              
              var monthsArray = scheduleValue['months'];
              if (monthsArray !== null && monthsArray !== undefined) {
                scheduleInstance.months = [];
                for (var loweredIndex4 = 0; loweredIndex4 < monthsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                  var monthsValue = monthsArray[loweredIndex4];
                  scheduleInstance.months.push(monthsValue);
                }
              }
              
              var monthDaysArray = scheduleValue['monthDays'];
              if (monthDaysArray !== null && monthDaysArray !== undefined) {
                scheduleInstance.monthDays = [];
                for (var loweredIndex5 = 0; loweredIndex5 < monthDaysArray.length; loweredIndex5 = loweredIndex5 + 1) {
                  var monthDaysValue = monthDaysArray[loweredIndex5];
                  scheduleInstance.monthDays.push(monthDaysValue);
                }
              }
              
              var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
              if (monthlyOccurrencesArray !== null && monthlyOccurrencesArray !== undefined) {
                scheduleInstance.monthlyOccurrences = [];
                for (var loweredIndex6 = 0; loweredIndex6 < monthlyOccurrencesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                  var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex6];
                  var jobScheduleMonthlyOccurrenceInstance = {};
                  scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                  
                  var dayValue = monthlyOccurrencesValue['day'];
                  if (dayValue !== null && dayValue !== undefined) {
                    var dayInstance = dayValue;
                    jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                  }
                  
                  var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                  if (occurrenceValue !== null && occurrenceValue !== undefined) {
                    var occurrenceInstance = occurrenceValue;
                    jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                  }
                }
              }
            }
          }
          
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = {};
            jobInstance.status = statusInstance;
            
            var lastExecutionTimeValue = statusValue['lastExecutionTime'];
            if (lastExecutionTimeValue !== null && lastExecutionTimeValue !== undefined) {
              var lastExecutionTimeInstance = lastExecutionTimeValue;
              statusInstance.lastExecutionTime = lastExecutionTimeInstance;
            }
            
            var nextExecutionTimeValue = statusValue['nextExecutionTime'];
            if (nextExecutionTimeValue !== null && nextExecutionTimeValue !== undefined) {
              var nextExecutionTimeInstance = nextExecutionTimeValue;
              statusInstance.nextExecutionTime = nextExecutionTimeInstance;
            }
            
            var executionCountValue = statusValue['executionCount'];
            if (executionCountValue !== null && executionCountValue !== undefined) {
              var executionCountInstance = executionCountValue;
              statusInstance.executionCount = executionCountInstance;
            }
            
            var failureCountValue = statusValue['failureCount'];
            if (failureCountValue !== null && failureCountValue !== undefined) {
              var failureCountInstance = failureCountValue;
              statusInstance.failureCount = failureCountInstance;
            }
            
            var faultedCountValue = statusValue['faultedCount'];
            if (faultedCountValue !== null && faultedCountValue !== undefined) {
              var faultedCountInstance = faultedCountValue;
              statusInstance.faultedCount = faultedCountInstance;
            }
          }
          
          var stateValue = responseDoc['state'];
          if (stateValue !== null && stateValue !== undefined) {
            var stateInstance = stateValue;
            jobInstance.state = stateInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the execution history of a Job.
   * 
   * @param {string} jobId Id of the job to get the history of.
   * 
   * @param {JobGetHistoryParameters} parameters Parameters supplied to the Get
   * Job History operation.
   * 
   * @param {number} [parameters.skip] Specify the (0-based) index of the
   * history list from which to begin requesting entries.
   * 
   * @param {number} [parameters.top] Specify the number of history entries to
   * request, in the of range [1..100].
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.getHistory = function(jobId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs/';
    url2 = url2 + encodeURIComponent(jobId);
    url2 = url2 + '/history';
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    if (parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    if (parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { jobHistory: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobHistoryArray = responseDoc;
          if (jobHistoryArray !== null && jobHistoryArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < jobHistoryArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var jobHistoryValue = jobHistoryArray[loweredIndex1];
              var jobHistoryEntryInstance = {};
              result.jobHistory.push(jobHistoryEntryInstance);
              
              var jobIdValue = jobHistoryValue['jobId'];
              if (jobIdValue !== null && jobIdValue !== undefined) {
                var jobIdInstance = jobIdValue;
                jobHistoryEntryInstance.id = jobIdInstance;
              }
              
              var timestampValue = jobHistoryValue['timestamp'];
              if (timestampValue !== null && timestampValue !== undefined) {
                var timestampInstance = timestampValue;
                jobHistoryEntryInstance.timestamp = timestampInstance;
              }
              
              var startTimeValue = jobHistoryValue['startTime'];
              if (startTimeValue !== null && startTimeValue !== undefined) {
                var startTimeInstance = startTimeValue;
                jobHistoryEntryInstance.startTime = startTimeInstance;
              }
              
              var endTimeValue = jobHistoryValue['endTime'];
              if (endTimeValue !== null && endTimeValue !== undefined) {
                var endTimeInstance = endTimeValue;
                jobHistoryEntryInstance.endTime = endTimeInstance;
              }
              
              var stateValue = jobHistoryValue['state'];
              if (stateValue !== null && stateValue !== undefined) {
                var stateInstance = stateValue;
                jobHistoryEntryInstance.state = stateInstance;
              }
              
              var messageValue = jobHistoryValue['message'];
              if (messageValue !== null && messageValue !== undefined) {
                var messageInstance = messageValue;
                jobHistoryEntryInstance.message = messageInstance;
              }
              
              var statusValue = jobHistoryValue['status'];
              if (statusValue !== null && statusValue !== undefined) {
                var statusInstance = statusValue;
                jobHistoryEntryInstance.status = statusInstance;
              }
              
              var actionNameValue = jobHistoryValue['actionName'];
              if (actionNameValue !== null && actionNameValue !== undefined) {
                var actionNameInstance = actionNameValue;
                jobHistoryEntryInstance.actionName = actionNameInstance;
              }
              
              var repeatCountValue = jobHistoryValue['repeatCount'];
              if (repeatCountValue !== null && repeatCountValue !== undefined) {
                var repeatCountInstance = repeatCountValue;
                jobHistoryEntryInstance.repeatCount = repeatCountInstance;
              }
              
              var retryCountValue = jobHistoryValue['retryCount'];
              if (retryCountValue !== null && retryCountValue !== undefined) {
                var retryCountInstance = retryCountValue;
                jobHistoryEntryInstance.retryCount = retryCountInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the execution history of a Job with a filter on the job Status.
   * 
   * @param {string} jobId Id of the job to get the history of.
   * 
   * @param {JobGetHistoryWithFilterParameters} parameters Parameters supplied
   * to the Get Job History With Filter operation.
   * 
   * @param {JobHistoryStatus} parameters.status Filter the job history to have
   * it only return job execution attempts having a particular Status,
   * 'completed' or 'failed'.
   * 
   * @param {number} [parameters.skip] Specify the (0-based) index of the
   * history list from which to begin requesting entries.
   * 
   * @param {number} [parameters.top] Specify the number of history entries to
   * request, in the of range [1..100].
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.getHistoryWithFilter = function(jobId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.status === null || parameters.status === undefined) {
      return callback(new Error('parameters.status cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs/';
    url2 = url2 + encodeURIComponent(jobId);
    url2 = url2 + '/history';
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    var odataFilter = [];
    odataFilter.push('status eq ' + encodeURIComponent(parameters.status !== null && parameters.status !== undefined ? parameters.status.toString() : 'Completed'));
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    if (parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { jobHistory: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobHistoryArray = responseDoc;
          if (jobHistoryArray !== null && jobHistoryArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < jobHistoryArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var jobHistoryValue = jobHistoryArray[loweredIndex1];
              var jobHistoryEntryInstance = {};
              result.jobHistory.push(jobHistoryEntryInstance);
              
              var jobIdValue = jobHistoryValue['jobId'];
              if (jobIdValue !== null && jobIdValue !== undefined) {
                var jobIdInstance = jobIdValue;
                jobHistoryEntryInstance.id = jobIdInstance;
              }
              
              var timestampValue = jobHistoryValue['timestamp'];
              if (timestampValue !== null && timestampValue !== undefined) {
                var timestampInstance = timestampValue;
                jobHistoryEntryInstance.timestamp = timestampInstance;
              }
              
              var startTimeValue = jobHistoryValue['startTime'];
              if (startTimeValue !== null && startTimeValue !== undefined) {
                var startTimeInstance = startTimeValue;
                jobHistoryEntryInstance.startTime = startTimeInstance;
              }
              
              var endTimeValue = jobHistoryValue['endTime'];
              if (endTimeValue !== null && endTimeValue !== undefined) {
                var endTimeInstance = endTimeValue;
                jobHistoryEntryInstance.endTime = endTimeInstance;
              }
              
              var stateValue = jobHistoryValue['state'];
              if (stateValue !== null && stateValue !== undefined) {
                var stateInstance = stateValue;
                jobHistoryEntryInstance.state = stateInstance;
              }
              
              var messageValue = jobHistoryValue['message'];
              if (messageValue !== null && messageValue !== undefined) {
                var messageInstance = messageValue;
                jobHistoryEntryInstance.message = messageInstance;
              }
              
              var statusValue = jobHistoryValue['status'];
              if (statusValue !== null && statusValue !== undefined) {
                var statusInstance = statusValue;
                jobHistoryEntryInstance.status = statusInstance;
              }
              
              var actionNameValue = jobHistoryValue['actionName'];
              if (actionNameValue !== null && actionNameValue !== undefined) {
                var actionNameInstance = actionNameValue;
                jobHistoryEntryInstance.actionName = actionNameInstance;
              }
              
              var repeatCountValue = jobHistoryValue['repeatCount'];
              if (repeatCountValue !== null && repeatCountValue !== undefined) {
                var repeatCountInstance = repeatCountValue;
                jobHistoryEntryInstance.repeatCount = repeatCountInstance;
              }
              
              var retryCountValue = jobHistoryValue['retryCount'];
              if (retryCountValue !== null && retryCountValue !== undefined) {
                var retryCountInstance = retryCountValue;
                jobHistoryEntryInstance.retryCount = retryCountInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of all jobs in a job collection.
   * 
   * @param {JobListParameters} parameters Parameters supplied to the List Jobs
   * operation.
   * 
   * @param {number} [parameters.skip] Specify the (0-based) index of the job
   * list from which to begin requesting entries.
   * 
   * @param {number} [parameters.top] Specify the number of jobs to request, in
   * the of range [1..100].
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.list = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs';
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    if (parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    if (parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { jobs: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobsArray = responseDoc;
          if (jobsArray !== null && jobsArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < jobsArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var jobsValue = jobsArray[loweredIndex1];
              var jobInstance = {};
              result.jobs.push(jobInstance);
              
              var idValue = jobsValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                jobInstance.id = idInstance;
              }
              
              var startTimeValue = jobsValue['startTime'];
              if (startTimeValue !== null && startTimeValue !== undefined) {
                var startTimeInstance = startTimeValue;
                jobInstance.startTime = startTimeInstance;
              }
              
              var actionValue = jobsValue['action'];
              if (actionValue !== null && actionValue !== undefined) {
                var actionInstance = {};
                jobInstance.action = actionInstance;
                
                var typeValue = actionValue['type'];
                if (typeValue !== null && typeValue !== undefined) {
                  var typeInstance = typeValue;
                  actionInstance.type = typeInstance;
                }
                
                var retryPolicyValue = actionValue['retryPolicy'];
                if (retryPolicyValue !== null && retryPolicyValue !== undefined) {
                  var retryPolicyInstance = {};
                  actionInstance.retryPolicy = retryPolicyInstance;
                  
                  var retryTypeValue = retryPolicyValue['retryType'];
                  if (retryTypeValue !== null && retryTypeValue !== undefined) {
                    var retryTypeInstance = retryTypeValue;
                    retryPolicyInstance.retryType = retryTypeInstance;
                  }
                  
                  var retryIntervalValue = retryPolicyValue['retryInterval'];
                  if (retryIntervalValue !== null && retryIntervalValue !== undefined) {
                    var retryIntervalInstance = moment.duration(retryIntervalValue);
                    retryPolicyInstance.retryInterval = retryIntervalInstance;
                  }
                  
                  var retryCountValue = retryPolicyValue['retryCount'];
                  if (retryCountValue !== null && retryCountValue !== undefined) {
                    var retryCountInstance = retryCountValue;
                    retryPolicyInstance.retryCount = retryCountInstance;
                  }
                }
                
                var errorActionValue = actionValue['errorAction'];
                if (errorActionValue !== null && errorActionValue !== undefined) {
                  var errorActionInstance = {};
                  actionInstance.errorAction = errorActionInstance;
                  
                  var typeValue2 = errorActionValue['type'];
                  if (typeValue2 !== null && typeValue2 !== undefined) {
                    var typeInstance2 = typeValue2;
                    errorActionInstance.type = typeInstance2;
                  }
                  
                  var requestValue = errorActionValue['request'];
                  if (requestValue !== null && requestValue !== undefined) {
                    var requestInstance = { headers: {} };
                    errorActionInstance.request = requestInstance;
                    
                    var uriValue = requestValue['uri'];
                    if (uriValue !== null && uriValue !== undefined) {
                      var uriInstance = uriValue;
                      requestInstance.uri = uriInstance;
                    }
                    
                    var methodValue = requestValue['method'];
                    if (methodValue !== null && methodValue !== undefined) {
                      var methodInstance = methodValue;
                      requestInstance.method = methodInstance;
                    }
                    
                    var headersSequenceElement = requestValue['headers'];
                    if (headersSequenceElement !== null && headersSequenceElement !== undefined) {
                      for (var property in headersSequenceElement) {
                        var headersKey = property;
                        var headersValue = headersSequenceElement[property];
                        requestInstance.headers[headersKey] = headersValue;
                      }
                    }
                    
                    var bodyValue = requestValue['body'];
                    if (bodyValue !== null && bodyValue !== undefined) {
                      var bodyInstance = bodyValue;
                      requestInstance.body = bodyInstance;
                    }
                    
                    var authenticationValue = requestValue['authentication'];
                    if (authenticationValue !== null && authenticationValue !== undefined) {
                      var typeName = authenticationValue['type'];
                      if (typeName === 'ClientCertificate') {
                        var clientCertAuthenticationInstance = {};
                        
                        var passwordValue = authenticationValue['password'];
                        if (passwordValue !== null && passwordValue !== undefined) {
                          var passwordInstance = passwordValue;
                          clientCertAuthenticationInstance.password = passwordInstance;
                        }
                        
                        var pfxValue = authenticationValue['pfx'];
                        if (pfxValue !== null && pfxValue !== undefined) {
                          var pfxInstance = pfxValue;
                          clientCertAuthenticationInstance.pfx = pfxInstance;
                        }
                        
                        var certificateThumbprintValue = authenticationValue['certificateThumbprint'];
                        if (certificateThumbprintValue !== null && certificateThumbprintValue !== undefined) {
                          var certificateThumbprintInstance = certificateThumbprintValue;
                          clientCertAuthenticationInstance.certificateThumbprint = certificateThumbprintInstance;
                        }
                        
                        var certificateExpirationValue = authenticationValue['certificateExpiration'];
                        if (certificateExpirationValue !== null && certificateExpirationValue !== undefined) {
                          var certificateExpirationInstance = certificateExpirationValue;
                          clientCertAuthenticationInstance.certificateExpiration = certificateExpirationInstance;
                        }
                        
                        var certificateSubjectNameValue = authenticationValue['certificateSubjectName'];
                        if (certificateSubjectNameValue !== null && certificateSubjectNameValue !== undefined) {
                          var certificateSubjectNameInstance = certificateSubjectNameValue;
                          clientCertAuthenticationInstance.certificateSubjectName = certificateSubjectNameInstance;
                        }
                        
                        var typeValue3 = authenticationValue['type'];
                        if (typeValue3 !== null && typeValue3 !== undefined) {
                          var typeInstance3 = typeValue3;
                          clientCertAuthenticationInstance.type = typeInstance3;
                        }
                        requestInstance.authentication = clientCertAuthenticationInstance;
                      }
                      if (typeName === 'ActiveDirectoryOAuth') {
                        var aADOAuthAuthenticationInstance = {};
                        
                        var secretValue = authenticationValue['secret'];
                        if (secretValue !== null && secretValue !== undefined) {
                          var secretInstance = secretValue;
                          aADOAuthAuthenticationInstance.secret = secretInstance;
                        }
                        
                        var tenantValue = authenticationValue['tenant'];
                        if (tenantValue !== null && tenantValue !== undefined) {
                          var tenantInstance = tenantValue;
                          aADOAuthAuthenticationInstance.tenant = tenantInstance;
                        }
                        
                        var audienceValue = authenticationValue['audience'];
                        if (audienceValue !== null && audienceValue !== undefined) {
                          var audienceInstance = audienceValue;
                          aADOAuthAuthenticationInstance.audience = audienceInstance;
                        }
                        
                        var clientIdValue = authenticationValue['clientId'];
                        if (clientIdValue !== null && clientIdValue !== undefined) {
                          var clientIdInstance = clientIdValue;
                          aADOAuthAuthenticationInstance.clientId = clientIdInstance;
                        }
                        
                        var typeValue4 = authenticationValue['type'];
                        if (typeValue4 !== null && typeValue4 !== undefined) {
                          var typeInstance4 = typeValue4;
                          aADOAuthAuthenticationInstance.type = typeInstance4;
                        }
                        requestInstance.authentication = aADOAuthAuthenticationInstance;
                      }
                      if (typeName === 'Basic') {
                        var basicAuthenticationInstance = {};
                        
                        var usernameValue = authenticationValue['username'];
                        if (usernameValue !== null && usernameValue !== undefined) {
                          var usernameInstance = usernameValue;
                          basicAuthenticationInstance.username = usernameInstance;
                        }
                        
                        var passwordValue2 = authenticationValue['password'];
                        if (passwordValue2 !== null && passwordValue2 !== undefined) {
                          var passwordInstance2 = passwordValue2;
                          basicAuthenticationInstance.password = passwordInstance2;
                        }
                        
                        var typeValue5 = authenticationValue['type'];
                        if (typeValue5 !== null && typeValue5 !== undefined) {
                          var typeInstance5 = typeValue5;
                          basicAuthenticationInstance.type = typeInstance5;
                        }
                        requestInstance.authentication = basicAuthenticationInstance;
                      }
                    }
                  }
                  
                  var queueMessageValue = errorActionValue['queueMessage'];
                  if (queueMessageValue !== null && queueMessageValue !== undefined) {
                    var queueMessageInstance = {};
                    errorActionInstance.queueMessage = queueMessageInstance;
                    
                    var storageAccountValue = queueMessageValue['storageAccount'];
                    if (storageAccountValue !== null && storageAccountValue !== undefined) {
                      var storageAccountInstance = storageAccountValue;
                      queueMessageInstance.storageAccountName = storageAccountInstance;
                    }
                    
                    var queueNameValue = queueMessageValue['queueName'];
                    if (queueNameValue !== null && queueNameValue !== undefined) {
                      var queueNameInstance = queueNameValue;
                      queueMessageInstance.queueName = queueNameInstance;
                    }
                    
                    var sasTokenValue = queueMessageValue['sasToken'];
                    if (sasTokenValue !== null && sasTokenValue !== undefined) {
                      var sasTokenInstance = sasTokenValue;
                      queueMessageInstance.sasToken = sasTokenInstance;
                    }
                    
                    var messageValue = queueMessageValue['message'];
                    if (messageValue !== null && messageValue !== undefined) {
                      var messageInstance = messageValue;
                      queueMessageInstance.message = messageInstance;
                    }
                  }
                }
                
                var requestValue2 = actionValue['request'];
                if (requestValue2 !== null && requestValue2 !== undefined) {
                  var requestInstance2 = { headers: {} };
                  actionInstance.request = requestInstance2;
                  
                  var uriValue2 = requestValue2['uri'];
                  if (uriValue2 !== null && uriValue2 !== undefined) {
                    var uriInstance2 = uriValue2;
                    requestInstance2.uri = uriInstance2;
                  }
                  
                  var methodValue2 = requestValue2['method'];
                  if (methodValue2 !== null && methodValue2 !== undefined) {
                    var methodInstance2 = methodValue2;
                    requestInstance2.method = methodInstance2;
                  }
                  
                  var headersSequenceElement2 = requestValue2['headers'];
                  if (headersSequenceElement2 !== null && headersSequenceElement2 !== undefined) {
                    for (var property2 in headersSequenceElement2) {
                      var headersKey2 = property2;
                      var headersValue2 = headersSequenceElement2[property2];
                      requestInstance2.headers[headersKey2] = headersValue2;
                    }
                  }
                  
                  var bodyValue2 = requestValue2['body'];
                  if (bodyValue2 !== null && bodyValue2 !== undefined) {
                    var bodyInstance2 = bodyValue2;
                    requestInstance2.body = bodyInstance2;
                  }
                  
                  var authenticationValue2 = requestValue2['authentication'];
                  if (authenticationValue2 !== null && authenticationValue2 !== undefined) {
                    var typeName2 = authenticationValue2['type'];
                    if (typeName2 === 'ClientCertificate') {
                      var clientCertAuthenticationInstance2 = {};
                      
                      var passwordValue3 = authenticationValue2['password'];
                      if (passwordValue3 !== null && passwordValue3 !== undefined) {
                        var passwordInstance3 = passwordValue3;
                        clientCertAuthenticationInstance2.password = passwordInstance3;
                      }
                      
                      var pfxValue2 = authenticationValue2['pfx'];
                      if (pfxValue2 !== null && pfxValue2 !== undefined) {
                        var pfxInstance2 = pfxValue2;
                        clientCertAuthenticationInstance2.pfx = pfxInstance2;
                      }
                      
                      var certificateThumbprintValue2 = authenticationValue2['certificateThumbprint'];
                      if (certificateThumbprintValue2 !== null && certificateThumbprintValue2 !== undefined) {
                        var certificateThumbprintInstance2 = certificateThumbprintValue2;
                        clientCertAuthenticationInstance2.certificateThumbprint = certificateThumbprintInstance2;
                      }
                      
                      var certificateExpirationValue2 = authenticationValue2['certificateExpiration'];
                      if (certificateExpirationValue2 !== null && certificateExpirationValue2 !== undefined) {
                        var certificateExpirationInstance2 = certificateExpirationValue2;
                        clientCertAuthenticationInstance2.certificateExpiration = certificateExpirationInstance2;
                      }
                      
                      var certificateSubjectNameValue2 = authenticationValue2['certificateSubjectName'];
                      if (certificateSubjectNameValue2 !== null && certificateSubjectNameValue2 !== undefined) {
                        var certificateSubjectNameInstance2 = certificateSubjectNameValue2;
                        clientCertAuthenticationInstance2.certificateSubjectName = certificateSubjectNameInstance2;
                      }
                      
                      var typeValue6 = authenticationValue2['type'];
                      if (typeValue6 !== null && typeValue6 !== undefined) {
                        var typeInstance6 = typeValue6;
                        clientCertAuthenticationInstance2.type = typeInstance6;
                      }
                      requestInstance2.authentication = clientCertAuthenticationInstance2;
                    }
                    if (typeName2 === 'ActiveDirectoryOAuth') {
                      var aADOAuthAuthenticationInstance2 = {};
                      
                      var secretValue2 = authenticationValue2['secret'];
                      if (secretValue2 !== null && secretValue2 !== undefined) {
                        var secretInstance2 = secretValue2;
                        aADOAuthAuthenticationInstance2.secret = secretInstance2;
                      }
                      
                      var tenantValue2 = authenticationValue2['tenant'];
                      if (tenantValue2 !== null && tenantValue2 !== undefined) {
                        var tenantInstance2 = tenantValue2;
                        aADOAuthAuthenticationInstance2.tenant = tenantInstance2;
                      }
                      
                      var audienceValue2 = authenticationValue2['audience'];
                      if (audienceValue2 !== null && audienceValue2 !== undefined) {
                        var audienceInstance2 = audienceValue2;
                        aADOAuthAuthenticationInstance2.audience = audienceInstance2;
                      }
                      
                      var clientIdValue2 = authenticationValue2['clientId'];
                      if (clientIdValue2 !== null && clientIdValue2 !== undefined) {
                        var clientIdInstance2 = clientIdValue2;
                        aADOAuthAuthenticationInstance2.clientId = clientIdInstance2;
                      }
                      
                      var typeValue7 = authenticationValue2['type'];
                      if (typeValue7 !== null && typeValue7 !== undefined) {
                        var typeInstance7 = typeValue7;
                        aADOAuthAuthenticationInstance2.type = typeInstance7;
                      }
                      requestInstance2.authentication = aADOAuthAuthenticationInstance2;
                    }
                    if (typeName2 === 'Basic') {
                      var basicAuthenticationInstance2 = {};
                      
                      var usernameValue2 = authenticationValue2['username'];
                      if (usernameValue2 !== null && usernameValue2 !== undefined) {
                        var usernameInstance2 = usernameValue2;
                        basicAuthenticationInstance2.username = usernameInstance2;
                      }
                      
                      var passwordValue4 = authenticationValue2['password'];
                      if (passwordValue4 !== null && passwordValue4 !== undefined) {
                        var passwordInstance4 = passwordValue4;
                        basicAuthenticationInstance2.password = passwordInstance4;
                      }
                      
                      var typeValue8 = authenticationValue2['type'];
                      if (typeValue8 !== null && typeValue8 !== undefined) {
                        var typeInstance8 = typeValue8;
                        basicAuthenticationInstance2.type = typeInstance8;
                      }
                      requestInstance2.authentication = basicAuthenticationInstance2;
                    }
                  }
                }
                
                var queueMessageValue2 = actionValue['queueMessage'];
                if (queueMessageValue2 !== null && queueMessageValue2 !== undefined) {
                  var queueMessageInstance2 = {};
                  actionInstance.queueMessage = queueMessageInstance2;
                  
                  var storageAccountValue2 = queueMessageValue2['storageAccount'];
                  if (storageAccountValue2 !== null && storageAccountValue2 !== undefined) {
                    var storageAccountInstance2 = storageAccountValue2;
                    queueMessageInstance2.storageAccountName = storageAccountInstance2;
                  }
                  
                  var queueNameValue2 = queueMessageValue2['queueName'];
                  if (queueNameValue2 !== null && queueNameValue2 !== undefined) {
                    var queueNameInstance2 = queueNameValue2;
                    queueMessageInstance2.queueName = queueNameInstance2;
                  }
                  
                  var sasTokenValue2 = queueMessageValue2['sasToken'];
                  if (sasTokenValue2 !== null && sasTokenValue2 !== undefined) {
                    var sasTokenInstance2 = sasTokenValue2;
                    queueMessageInstance2.sasToken = sasTokenInstance2;
                  }
                  
                  var messageValue2 = queueMessageValue2['message'];
                  if (messageValue2 !== null && messageValue2 !== undefined) {
                    var messageInstance2 = messageValue2;
                    queueMessageInstance2.message = messageInstance2;
                  }
                }
              }
              
              var recurrenceValue = jobsValue['recurrence'];
              if (recurrenceValue !== null && recurrenceValue !== undefined) {
                var recurrenceInstance = {};
                jobInstance.recurrence = recurrenceInstance;
                
                var frequencyValue = recurrenceValue['frequency'];
                if (frequencyValue !== null && frequencyValue !== undefined) {
                  var frequencyInstance = frequencyValue;
                  recurrenceInstance.frequency = frequencyInstance;
                }
                
                var intervalValue = recurrenceValue['interval'];
                if (intervalValue !== null && intervalValue !== undefined) {
                  var intervalInstance = intervalValue;
                  recurrenceInstance.interval = intervalInstance;
                }
                
                var countValue = recurrenceValue['count'];
                if (countValue !== null && countValue !== undefined) {
                  var countInstance = countValue;
                  recurrenceInstance.count = countInstance;
                }
                
                var endTimeValue = recurrenceValue['endTime'];
                if (endTimeValue !== null && endTimeValue !== undefined) {
                  var endTimeInstance = endTimeValue;
                  recurrenceInstance.endTime = endTimeInstance;
                }
                
                var scheduleValue = recurrenceValue['schedule'];
                if (scheduleValue !== null && scheduleValue !== undefined) {
                  var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
                  recurrenceInstance.schedule = scheduleInstance;
                  
                  var minutesArray = scheduleValue['minutes'];
                  if (minutesArray !== null && minutesArray !== undefined) {
                    scheduleInstance.minutes = [];
                    for (var loweredIndex2 = 0; loweredIndex2 < minutesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var minutesValue = minutesArray[loweredIndex2];
                      scheduleInstance.minutes.push(minutesValue);
                    }
                  }
                  
                  var hoursArray = scheduleValue['hours'];
                  if (hoursArray !== null && hoursArray !== undefined) {
                    scheduleInstance.hours = [];
                    for (var loweredIndex3 = 0; loweredIndex3 < hoursArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var hoursValue = hoursArray[loweredIndex3];
                      scheduleInstance.hours.push(hoursValue);
                    }
                  }
                  
                  var weekDaysArray = scheduleValue['weekDays'];
                  if (weekDaysArray !== null && weekDaysArray !== undefined) {
                    scheduleInstance.days = [];
                    for (var loweredIndex4 = 0; loweredIndex4 < weekDaysArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var weekDaysValue = weekDaysArray[loweredIndex4];
                      scheduleInstance.days.push(weekDaysValue);
                    }
                  }
                  
                  var monthsArray = scheduleValue['months'];
                  if (monthsArray !== null && monthsArray !== undefined) {
                    scheduleInstance.months = [];
                    for (var loweredIndex5 = 0; loweredIndex5 < monthsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var monthsValue = monthsArray[loweredIndex5];
                      scheduleInstance.months.push(monthsValue);
                    }
                  }
                  
                  var monthDaysArray = scheduleValue['monthDays'];
                  if (monthDaysArray !== null && monthDaysArray !== undefined) {
                    scheduleInstance.monthDays = [];
                    for (var loweredIndex6 = 0; loweredIndex6 < monthDaysArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var monthDaysValue = monthDaysArray[loweredIndex6];
                      scheduleInstance.monthDays.push(monthDaysValue);
                    }
                  }
                  
                  var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
                  if (monthlyOccurrencesArray !== null && monthlyOccurrencesArray !== undefined) {
                    scheduleInstance.monthlyOccurrences = [];
                    for (var loweredIndex7 = 0; loweredIndex7 < monthlyOccurrencesArray.length; loweredIndex7 = loweredIndex7 + 1) {
                      var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex7];
                      var jobScheduleMonthlyOccurrenceInstance = {};
                      scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                      
                      var dayValue = monthlyOccurrencesValue['day'];
                      if (dayValue !== null && dayValue !== undefined) {
                        var dayInstance = dayValue;
                        jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                      }
                      
                      var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                      if (occurrenceValue !== null && occurrenceValue !== undefined) {
                        var occurrenceInstance = occurrenceValue;
                        jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                      }
                    }
                  }
                }
              }
              
              var statusValue = jobsValue['status'];
              if (statusValue !== null && statusValue !== undefined) {
                var statusInstance = {};
                jobInstance.status = statusInstance;
                
                var lastExecutionTimeValue = statusValue['lastExecutionTime'];
                if (lastExecutionTimeValue !== null && lastExecutionTimeValue !== undefined) {
                  var lastExecutionTimeInstance = lastExecutionTimeValue;
                  statusInstance.lastExecutionTime = lastExecutionTimeInstance;
                }
                
                var nextExecutionTimeValue = statusValue['nextExecutionTime'];
                if (nextExecutionTimeValue !== null && nextExecutionTimeValue !== undefined) {
                  var nextExecutionTimeInstance = nextExecutionTimeValue;
                  statusInstance.nextExecutionTime = nextExecutionTimeInstance;
                }
                
                var executionCountValue = statusValue['executionCount'];
                if (executionCountValue !== null && executionCountValue !== undefined) {
                  var executionCountInstance = executionCountValue;
                  statusInstance.executionCount = executionCountInstance;
                }
                
                var failureCountValue = statusValue['failureCount'];
                if (failureCountValue !== null && failureCountValue !== undefined) {
                  var failureCountInstance = failureCountValue;
                  statusInstance.failureCount = failureCountInstance;
                }
                
                var faultedCountValue = statusValue['faultedCount'];
                if (faultedCountValue !== null && faultedCountValue !== undefined) {
                  var faultedCountInstance = faultedCountValue;
                  statusInstance.faultedCount = faultedCountInstance;
                }
              }
              
              var stateValue = jobsValue['state'];
              if (stateValue !== null && stateValue !== undefined) {
                var stateInstance = stateValue;
                jobInstance.state = stateInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get the list of jobs in a job collection matching a filter on job state.
   * 
   * @param {JobListWithFilterParameters} parameters Parameters supplied to the
   * List Jobs with filter operation.
   * 
   * @param {JobState} parameters.state Filter the job history to have it only
   * return job execution attempts having a particular State, enabled,
   * disabled, faulted, or completed.
   * 
   * @param {number} [parameters.skip] Specify the (0-based) index of the job
   * list from which to begin requesting entries.
   * 
   * @param {number} [parameters.top] Specify the number of jobs to request, in
   * the of range [1..100].
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.listWithFilter = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.state === null || parameters.state === undefined) {
      return callback(new Error('parameters.state cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs';
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    var odataFilter = [];
    odataFilter.push('state eq ' + encodeURIComponent(parameters.state !== null && parameters.state !== undefined ? parameters.state.toString() : 'Enabled'));
    if (odataFilter.length > 0) {
      queryParameters.push('$filter=' + odataFilter.join(null));
    }
    if (parameters.skip !== null && parameters.skip !== undefined) {
      queryParameters.push('$skip=' + encodeURIComponent(parameters.skip.toString()));
    }
    if (parameters.top !== null && parameters.top !== undefined) {
      queryParameters.push('$top=' + encodeURIComponent(parameters.top.toString()));
    }
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { jobs: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobsArray = responseDoc;
          if (jobsArray !== null && jobsArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < jobsArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var jobsValue = jobsArray[loweredIndex1];
              var jobInstance = {};
              result.jobs.push(jobInstance);
              
              var idValue = jobsValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                jobInstance.id = idInstance;
              }
              
              var startTimeValue = jobsValue['startTime'];
              if (startTimeValue !== null && startTimeValue !== undefined) {
                var startTimeInstance = startTimeValue;
                jobInstance.startTime = startTimeInstance;
              }
              
              var actionValue = jobsValue['action'];
              if (actionValue !== null && actionValue !== undefined) {
                var actionInstance = {};
                jobInstance.action = actionInstance;
                
                var typeValue = actionValue['type'];
                if (typeValue !== null && typeValue !== undefined) {
                  var typeInstance = typeValue;
                  actionInstance.type = typeInstance;
                }
                
                var retryPolicyValue = actionValue['retryPolicy'];
                if (retryPolicyValue !== null && retryPolicyValue !== undefined) {
                  var retryPolicyInstance = {};
                  actionInstance.retryPolicy = retryPolicyInstance;
                  
                  var retryTypeValue = retryPolicyValue['retryType'];
                  if (retryTypeValue !== null && retryTypeValue !== undefined) {
                    var retryTypeInstance = retryTypeValue;
                    retryPolicyInstance.retryType = retryTypeInstance;
                  }
                  
                  var retryIntervalValue = retryPolicyValue['retryInterval'];
                  if (retryIntervalValue !== null && retryIntervalValue !== undefined) {
                    var retryIntervalInstance = moment.duration(retryIntervalValue);
                    retryPolicyInstance.retryInterval = retryIntervalInstance;
                  }
                  
                  var retryCountValue = retryPolicyValue['retryCount'];
                  if (retryCountValue !== null && retryCountValue !== undefined) {
                    var retryCountInstance = retryCountValue;
                    retryPolicyInstance.retryCount = retryCountInstance;
                  }
                }
                
                var errorActionValue = actionValue['errorAction'];
                if (errorActionValue !== null && errorActionValue !== undefined) {
                  var errorActionInstance = {};
                  actionInstance.errorAction = errorActionInstance;
                  
                  var typeValue2 = errorActionValue['type'];
                  if (typeValue2 !== null && typeValue2 !== undefined) {
                    var typeInstance2 = typeValue2;
                    errorActionInstance.type = typeInstance2;
                  }
                  
                  var requestValue = errorActionValue['request'];
                  if (requestValue !== null && requestValue !== undefined) {
                    var requestInstance = { headers: {} };
                    errorActionInstance.request = requestInstance;
                    
                    var uriValue = requestValue['uri'];
                    if (uriValue !== null && uriValue !== undefined) {
                      var uriInstance = uriValue;
                      requestInstance.uri = uriInstance;
                    }
                    
                    var methodValue = requestValue['method'];
                    if (methodValue !== null && methodValue !== undefined) {
                      var methodInstance = methodValue;
                      requestInstance.method = methodInstance;
                    }
                    
                    var headersSequenceElement = requestValue['headers'];
                    if (headersSequenceElement !== null && headersSequenceElement !== undefined) {
                      for (var property in headersSequenceElement) {
                        var headersKey = property;
                        var headersValue = headersSequenceElement[property];
                        requestInstance.headers[headersKey] = headersValue;
                      }
                    }
                    
                    var bodyValue = requestValue['body'];
                    if (bodyValue !== null && bodyValue !== undefined) {
                      var bodyInstance = bodyValue;
                      requestInstance.body = bodyInstance;
                    }
                    
                    var authenticationValue = requestValue['authentication'];
                    if (authenticationValue !== null && authenticationValue !== undefined) {
                      var typeName = authenticationValue['type'];
                      if (typeName === 'ClientCertificate') {
                        var clientCertAuthenticationInstance = {};
                        
                        var passwordValue = authenticationValue['password'];
                        if (passwordValue !== null && passwordValue !== undefined) {
                          var passwordInstance = passwordValue;
                          clientCertAuthenticationInstance.password = passwordInstance;
                        }
                        
                        var pfxValue = authenticationValue['pfx'];
                        if (pfxValue !== null && pfxValue !== undefined) {
                          var pfxInstance = pfxValue;
                          clientCertAuthenticationInstance.pfx = pfxInstance;
                        }
                        
                        var certificateThumbprintValue = authenticationValue['certificateThumbprint'];
                        if (certificateThumbprintValue !== null && certificateThumbprintValue !== undefined) {
                          var certificateThumbprintInstance = certificateThumbprintValue;
                          clientCertAuthenticationInstance.certificateThumbprint = certificateThumbprintInstance;
                        }
                        
                        var certificateExpirationValue = authenticationValue['certificateExpiration'];
                        if (certificateExpirationValue !== null && certificateExpirationValue !== undefined) {
                          var certificateExpirationInstance = certificateExpirationValue;
                          clientCertAuthenticationInstance.certificateExpiration = certificateExpirationInstance;
                        }
                        
                        var certificateSubjectNameValue = authenticationValue['certificateSubjectName'];
                        if (certificateSubjectNameValue !== null && certificateSubjectNameValue !== undefined) {
                          var certificateSubjectNameInstance = certificateSubjectNameValue;
                          clientCertAuthenticationInstance.certificateSubjectName = certificateSubjectNameInstance;
                        }
                        
                        var typeValue3 = authenticationValue['type'];
                        if (typeValue3 !== null && typeValue3 !== undefined) {
                          var typeInstance3 = typeValue3;
                          clientCertAuthenticationInstance.type = typeInstance3;
                        }
                        requestInstance.authentication = clientCertAuthenticationInstance;
                      }
                      if (typeName === 'ActiveDirectoryOAuth') {
                        var aADOAuthAuthenticationInstance = {};
                        
                        var secretValue = authenticationValue['secret'];
                        if (secretValue !== null && secretValue !== undefined) {
                          var secretInstance = secretValue;
                          aADOAuthAuthenticationInstance.secret = secretInstance;
                        }
                        
                        var tenantValue = authenticationValue['tenant'];
                        if (tenantValue !== null && tenantValue !== undefined) {
                          var tenantInstance = tenantValue;
                          aADOAuthAuthenticationInstance.tenant = tenantInstance;
                        }
                        
                        var audienceValue = authenticationValue['audience'];
                        if (audienceValue !== null && audienceValue !== undefined) {
                          var audienceInstance = audienceValue;
                          aADOAuthAuthenticationInstance.audience = audienceInstance;
                        }
                        
                        var clientIdValue = authenticationValue['clientId'];
                        if (clientIdValue !== null && clientIdValue !== undefined) {
                          var clientIdInstance = clientIdValue;
                          aADOAuthAuthenticationInstance.clientId = clientIdInstance;
                        }
                        
                        var typeValue4 = authenticationValue['type'];
                        if (typeValue4 !== null && typeValue4 !== undefined) {
                          var typeInstance4 = typeValue4;
                          aADOAuthAuthenticationInstance.type = typeInstance4;
                        }
                        requestInstance.authentication = aADOAuthAuthenticationInstance;
                      }
                      if (typeName === 'Basic') {
                        var basicAuthenticationInstance = {};
                        
                        var usernameValue = authenticationValue['username'];
                        if (usernameValue !== null && usernameValue !== undefined) {
                          var usernameInstance = usernameValue;
                          basicAuthenticationInstance.username = usernameInstance;
                        }
                        
                        var passwordValue2 = authenticationValue['password'];
                        if (passwordValue2 !== null && passwordValue2 !== undefined) {
                          var passwordInstance2 = passwordValue2;
                          basicAuthenticationInstance.password = passwordInstance2;
                        }
                        
                        var typeValue5 = authenticationValue['type'];
                        if (typeValue5 !== null && typeValue5 !== undefined) {
                          var typeInstance5 = typeValue5;
                          basicAuthenticationInstance.type = typeInstance5;
                        }
                        requestInstance.authentication = basicAuthenticationInstance;
                      }
                    }
                  }
                  
                  var queueMessageValue = errorActionValue['queueMessage'];
                  if (queueMessageValue !== null && queueMessageValue !== undefined) {
                    var queueMessageInstance = {};
                    errorActionInstance.queueMessage = queueMessageInstance;
                    
                    var storageAccountValue = queueMessageValue['storageAccount'];
                    if (storageAccountValue !== null && storageAccountValue !== undefined) {
                      var storageAccountInstance = storageAccountValue;
                      queueMessageInstance.storageAccountName = storageAccountInstance;
                    }
                    
                    var queueNameValue = queueMessageValue['queueName'];
                    if (queueNameValue !== null && queueNameValue !== undefined) {
                      var queueNameInstance = queueNameValue;
                      queueMessageInstance.queueName = queueNameInstance;
                    }
                    
                    var sasTokenValue = queueMessageValue['sasToken'];
                    if (sasTokenValue !== null && sasTokenValue !== undefined) {
                      var sasTokenInstance = sasTokenValue;
                      queueMessageInstance.sasToken = sasTokenInstance;
                    }
                    
                    var messageValue = queueMessageValue['message'];
                    if (messageValue !== null && messageValue !== undefined) {
                      var messageInstance = messageValue;
                      queueMessageInstance.message = messageInstance;
                    }
                  }
                }
                
                var requestValue2 = actionValue['request'];
                if (requestValue2 !== null && requestValue2 !== undefined) {
                  var requestInstance2 = { headers: {} };
                  actionInstance.request = requestInstance2;
                  
                  var uriValue2 = requestValue2['uri'];
                  if (uriValue2 !== null && uriValue2 !== undefined) {
                    var uriInstance2 = uriValue2;
                    requestInstance2.uri = uriInstance2;
                  }
                  
                  var methodValue2 = requestValue2['method'];
                  if (methodValue2 !== null && methodValue2 !== undefined) {
                    var methodInstance2 = methodValue2;
                    requestInstance2.method = methodInstance2;
                  }
                  
                  var headersSequenceElement2 = requestValue2['headers'];
                  if (headersSequenceElement2 !== null && headersSequenceElement2 !== undefined) {
                    for (var property2 in headersSequenceElement2) {
                      var headersKey2 = property2;
                      var headersValue2 = headersSequenceElement2[property2];
                      requestInstance2.headers[headersKey2] = headersValue2;
                    }
                  }
                  
                  var bodyValue2 = requestValue2['body'];
                  if (bodyValue2 !== null && bodyValue2 !== undefined) {
                    var bodyInstance2 = bodyValue2;
                    requestInstance2.body = bodyInstance2;
                  }
                  
                  var authenticationValue2 = requestValue2['authentication'];
                  if (authenticationValue2 !== null && authenticationValue2 !== undefined) {
                    var typeName2 = authenticationValue2['type'];
                    if (typeName2 === 'ClientCertificate') {
                      var clientCertAuthenticationInstance2 = {};
                      
                      var passwordValue3 = authenticationValue2['password'];
                      if (passwordValue3 !== null && passwordValue3 !== undefined) {
                        var passwordInstance3 = passwordValue3;
                        clientCertAuthenticationInstance2.password = passwordInstance3;
                      }
                      
                      var pfxValue2 = authenticationValue2['pfx'];
                      if (pfxValue2 !== null && pfxValue2 !== undefined) {
                        var pfxInstance2 = pfxValue2;
                        clientCertAuthenticationInstance2.pfx = pfxInstance2;
                      }
                      
                      var certificateThumbprintValue2 = authenticationValue2['certificateThumbprint'];
                      if (certificateThumbprintValue2 !== null && certificateThumbprintValue2 !== undefined) {
                        var certificateThumbprintInstance2 = certificateThumbprintValue2;
                        clientCertAuthenticationInstance2.certificateThumbprint = certificateThumbprintInstance2;
                      }
                      
                      var certificateExpirationValue2 = authenticationValue2['certificateExpiration'];
                      if (certificateExpirationValue2 !== null && certificateExpirationValue2 !== undefined) {
                        var certificateExpirationInstance2 = certificateExpirationValue2;
                        clientCertAuthenticationInstance2.certificateExpiration = certificateExpirationInstance2;
                      }
                      
                      var certificateSubjectNameValue2 = authenticationValue2['certificateSubjectName'];
                      if (certificateSubjectNameValue2 !== null && certificateSubjectNameValue2 !== undefined) {
                        var certificateSubjectNameInstance2 = certificateSubjectNameValue2;
                        clientCertAuthenticationInstance2.certificateSubjectName = certificateSubjectNameInstance2;
                      }
                      
                      var typeValue6 = authenticationValue2['type'];
                      if (typeValue6 !== null && typeValue6 !== undefined) {
                        var typeInstance6 = typeValue6;
                        clientCertAuthenticationInstance2.type = typeInstance6;
                      }
                      requestInstance2.authentication = clientCertAuthenticationInstance2;
                    }
                    if (typeName2 === 'ActiveDirectoryOAuth') {
                      var aADOAuthAuthenticationInstance2 = {};
                      
                      var secretValue2 = authenticationValue2['secret'];
                      if (secretValue2 !== null && secretValue2 !== undefined) {
                        var secretInstance2 = secretValue2;
                        aADOAuthAuthenticationInstance2.secret = secretInstance2;
                      }
                      
                      var tenantValue2 = authenticationValue2['tenant'];
                      if (tenantValue2 !== null && tenantValue2 !== undefined) {
                        var tenantInstance2 = tenantValue2;
                        aADOAuthAuthenticationInstance2.tenant = tenantInstance2;
                      }
                      
                      var audienceValue2 = authenticationValue2['audience'];
                      if (audienceValue2 !== null && audienceValue2 !== undefined) {
                        var audienceInstance2 = audienceValue2;
                        aADOAuthAuthenticationInstance2.audience = audienceInstance2;
                      }
                      
                      var clientIdValue2 = authenticationValue2['clientId'];
                      if (clientIdValue2 !== null && clientIdValue2 !== undefined) {
                        var clientIdInstance2 = clientIdValue2;
                        aADOAuthAuthenticationInstance2.clientId = clientIdInstance2;
                      }
                      
                      var typeValue7 = authenticationValue2['type'];
                      if (typeValue7 !== null && typeValue7 !== undefined) {
                        var typeInstance7 = typeValue7;
                        aADOAuthAuthenticationInstance2.type = typeInstance7;
                      }
                      requestInstance2.authentication = aADOAuthAuthenticationInstance2;
                    }
                    if (typeName2 === 'Basic') {
                      var basicAuthenticationInstance2 = {};
                      
                      var usernameValue2 = authenticationValue2['username'];
                      if (usernameValue2 !== null && usernameValue2 !== undefined) {
                        var usernameInstance2 = usernameValue2;
                        basicAuthenticationInstance2.username = usernameInstance2;
                      }
                      
                      var passwordValue4 = authenticationValue2['password'];
                      if (passwordValue4 !== null && passwordValue4 !== undefined) {
                        var passwordInstance4 = passwordValue4;
                        basicAuthenticationInstance2.password = passwordInstance4;
                      }
                      
                      var typeValue8 = authenticationValue2['type'];
                      if (typeValue8 !== null && typeValue8 !== undefined) {
                        var typeInstance8 = typeValue8;
                        basicAuthenticationInstance2.type = typeInstance8;
                      }
                      requestInstance2.authentication = basicAuthenticationInstance2;
                    }
                  }
                }
                
                var queueMessageValue2 = actionValue['queueMessage'];
                if (queueMessageValue2 !== null && queueMessageValue2 !== undefined) {
                  var queueMessageInstance2 = {};
                  actionInstance.queueMessage = queueMessageInstance2;
                  
                  var storageAccountValue2 = queueMessageValue2['storageAccount'];
                  if (storageAccountValue2 !== null && storageAccountValue2 !== undefined) {
                    var storageAccountInstance2 = storageAccountValue2;
                    queueMessageInstance2.storageAccountName = storageAccountInstance2;
                  }
                  
                  var queueNameValue2 = queueMessageValue2['queueName'];
                  if (queueNameValue2 !== null && queueNameValue2 !== undefined) {
                    var queueNameInstance2 = queueNameValue2;
                    queueMessageInstance2.queueName = queueNameInstance2;
                  }
                  
                  var sasTokenValue2 = queueMessageValue2['sasToken'];
                  if (sasTokenValue2 !== null && sasTokenValue2 !== undefined) {
                    var sasTokenInstance2 = sasTokenValue2;
                    queueMessageInstance2.sasToken = sasTokenInstance2;
                  }
                  
                  var messageValue2 = queueMessageValue2['message'];
                  if (messageValue2 !== null && messageValue2 !== undefined) {
                    var messageInstance2 = messageValue2;
                    queueMessageInstance2.message = messageInstance2;
                  }
                }
              }
              
              var recurrenceValue = jobsValue['recurrence'];
              if (recurrenceValue !== null && recurrenceValue !== undefined) {
                var recurrenceInstance = {};
                jobInstance.recurrence = recurrenceInstance;
                
                var frequencyValue = recurrenceValue['frequency'];
                if (frequencyValue !== null && frequencyValue !== undefined) {
                  var frequencyInstance = frequencyValue;
                  recurrenceInstance.frequency = frequencyInstance;
                }
                
                var intervalValue = recurrenceValue['interval'];
                if (intervalValue !== null && intervalValue !== undefined) {
                  var intervalInstance = intervalValue;
                  recurrenceInstance.interval = intervalInstance;
                }
                
                var countValue = recurrenceValue['count'];
                if (countValue !== null && countValue !== undefined) {
                  var countInstance = countValue;
                  recurrenceInstance.count = countInstance;
                }
                
                var endTimeValue = recurrenceValue['endTime'];
                if (endTimeValue !== null && endTimeValue !== undefined) {
                  var endTimeInstance = endTimeValue;
                  recurrenceInstance.endTime = endTimeInstance;
                }
                
                var scheduleValue = recurrenceValue['schedule'];
                if (scheduleValue !== null && scheduleValue !== undefined) {
                  var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
                  recurrenceInstance.schedule = scheduleInstance;
                  
                  var minutesArray = scheduleValue['minutes'];
                  if (minutesArray !== null && minutesArray !== undefined) {
                    scheduleInstance.minutes = [];
                    for (var loweredIndex2 = 0; loweredIndex2 < minutesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var minutesValue = minutesArray[loweredIndex2];
                      scheduleInstance.minutes.push(minutesValue);
                    }
                  }
                  
                  var hoursArray = scheduleValue['hours'];
                  if (hoursArray !== null && hoursArray !== undefined) {
                    scheduleInstance.hours = [];
                    for (var loweredIndex3 = 0; loweredIndex3 < hoursArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var hoursValue = hoursArray[loweredIndex3];
                      scheduleInstance.hours.push(hoursValue);
                    }
                  }
                  
                  var weekDaysArray = scheduleValue['weekDays'];
                  if (weekDaysArray !== null && weekDaysArray !== undefined) {
                    scheduleInstance.days = [];
                    for (var loweredIndex4 = 0; loweredIndex4 < weekDaysArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var weekDaysValue = weekDaysArray[loweredIndex4];
                      scheduleInstance.days.push(weekDaysValue);
                    }
                  }
                  
                  var monthsArray = scheduleValue['months'];
                  if (monthsArray !== null && monthsArray !== undefined) {
                    scheduleInstance.months = [];
                    for (var loweredIndex5 = 0; loweredIndex5 < monthsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var monthsValue = monthsArray[loweredIndex5];
                      scheduleInstance.months.push(monthsValue);
                    }
                  }
                  
                  var monthDaysArray = scheduleValue['monthDays'];
                  if (monthDaysArray !== null && monthDaysArray !== undefined) {
                    scheduleInstance.monthDays = [];
                    for (var loweredIndex6 = 0; loweredIndex6 < monthDaysArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var monthDaysValue = monthDaysArray[loweredIndex6];
                      scheduleInstance.monthDays.push(monthDaysValue);
                    }
                  }
                  
                  var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
                  if (monthlyOccurrencesArray !== null && monthlyOccurrencesArray !== undefined) {
                    scheduleInstance.monthlyOccurrences = [];
                    for (var loweredIndex7 = 0; loweredIndex7 < monthlyOccurrencesArray.length; loweredIndex7 = loweredIndex7 + 1) {
                      var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex7];
                      var jobScheduleMonthlyOccurrenceInstance = {};
                      scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                      
                      var dayValue = monthlyOccurrencesValue['day'];
                      if (dayValue !== null && dayValue !== undefined) {
                        var dayInstance = dayValue;
                        jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                      }
                      
                      var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                      if (occurrenceValue !== null && occurrenceValue !== undefined) {
                        var occurrenceInstance = occurrenceValue;
                        jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                      }
                    }
                  }
                }
              }
              
              var statusValue = jobsValue['status'];
              if (statusValue !== null && statusValue !== undefined) {
                var statusInstance = {};
                jobInstance.status = statusInstance;
                
                var lastExecutionTimeValue = statusValue['lastExecutionTime'];
                if (lastExecutionTimeValue !== null && lastExecutionTimeValue !== undefined) {
                  var lastExecutionTimeInstance = lastExecutionTimeValue;
                  statusInstance.lastExecutionTime = lastExecutionTimeInstance;
                }
                
                var nextExecutionTimeValue = statusValue['nextExecutionTime'];
                if (nextExecutionTimeValue !== null && nextExecutionTimeValue !== undefined) {
                  var nextExecutionTimeInstance = nextExecutionTimeValue;
                  statusInstance.nextExecutionTime = nextExecutionTimeInstance;
                }
                
                var executionCountValue = statusValue['executionCount'];
                if (executionCountValue !== null && executionCountValue !== undefined) {
                  var executionCountInstance = executionCountValue;
                  statusInstance.executionCount = executionCountInstance;
                }
                
                var failureCountValue = statusValue['failureCount'];
                if (failureCountValue !== null && failureCountValue !== undefined) {
                  var failureCountInstance = failureCountValue;
                  statusInstance.failureCount = failureCountInstance;
                }
                
                var faultedCountValue = statusValue['faultedCount'];
                if (faultedCountValue !== null && faultedCountValue !== undefined) {
                  var faultedCountInstance = faultedCountValue;
                  statusInstance.faultedCount = faultedCountInstance;
                }
              }
              
              var stateValue = jobsValue['state'];
              if (stateValue !== null && stateValue !== undefined) {
                var stateInstance = stateValue;
                jobInstance.state = stateInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Update the state of all jobs in a job collections.
   * 
   * @param {JobCollectionJobsUpdateStateParameters} parameters Parameters
   * supplied to the Update Jobs State operation.
   * 
   * @param {JobState} parameters.state New state to update to: 'enabled' or
   * 'disabled'.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.updateJobCollectionState = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.state === null || parameters.state === undefined) {
      return callback(new Error('parameters.state cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobCollectionJobsUpdateStateParametersValue = {};
    requestDoc = jobCollectionJobsUpdateStateParametersValue;
    
    jobCollectionJobsUpdateStateParametersValue['state'] = parameters.state !== null && parameters.state !== undefined ? parameters.state.toString() : 'Enabled';
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { jobs: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobsArray = responseDoc;
          if (jobsArray !== null && jobsArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < jobsArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var jobsValue = jobsArray[loweredIndex1];
              var jobInstance = {};
              result.jobs.push(jobInstance);
              
              var idValue = jobsValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                jobInstance.id = idInstance;
              }
              
              var startTimeValue = jobsValue['startTime'];
              if (startTimeValue !== null && startTimeValue !== undefined) {
                var startTimeInstance = startTimeValue;
                jobInstance.startTime = startTimeInstance;
              }
              
              var actionValue = jobsValue['action'];
              if (actionValue !== null && actionValue !== undefined) {
                var actionInstance = {};
                jobInstance.action = actionInstance;
                
                var typeValue = actionValue['type'];
                if (typeValue !== null && typeValue !== undefined) {
                  var typeInstance = typeValue;
                  actionInstance.type = typeInstance;
                }
                
                var retryPolicyValue = actionValue['retryPolicy'];
                if (retryPolicyValue !== null && retryPolicyValue !== undefined) {
                  var retryPolicyInstance = {};
                  actionInstance.retryPolicy = retryPolicyInstance;
                  
                  var retryTypeValue = retryPolicyValue['retryType'];
                  if (retryTypeValue !== null && retryTypeValue !== undefined) {
                    var retryTypeInstance = retryTypeValue;
                    retryPolicyInstance.retryType = retryTypeInstance;
                  }
                  
                  var retryIntervalValue = retryPolicyValue['retryInterval'];
                  if (retryIntervalValue !== null && retryIntervalValue !== undefined) {
                    var retryIntervalInstance = moment.duration(retryIntervalValue);
                    retryPolicyInstance.retryInterval = retryIntervalInstance;
                  }
                  
                  var retryCountValue = retryPolicyValue['retryCount'];
                  if (retryCountValue !== null && retryCountValue !== undefined) {
                    var retryCountInstance = retryCountValue;
                    retryPolicyInstance.retryCount = retryCountInstance;
                  }
                }
                
                var errorActionValue = actionValue['errorAction'];
                if (errorActionValue !== null && errorActionValue !== undefined) {
                  var errorActionInstance = {};
                  actionInstance.errorAction = errorActionInstance;
                  
                  var typeValue2 = errorActionValue['type'];
                  if (typeValue2 !== null && typeValue2 !== undefined) {
                    var typeInstance2 = typeValue2;
                    errorActionInstance.type = typeInstance2;
                  }
                  
                  var requestValue = errorActionValue['request'];
                  if (requestValue !== null && requestValue !== undefined) {
                    var requestInstance = { headers: {} };
                    errorActionInstance.request = requestInstance;
                    
                    var uriValue = requestValue['uri'];
                    if (uriValue !== null && uriValue !== undefined) {
                      var uriInstance = uriValue;
                      requestInstance.uri = uriInstance;
                    }
                    
                    var methodValue = requestValue['method'];
                    if (methodValue !== null && methodValue !== undefined) {
                      var methodInstance = methodValue;
                      requestInstance.method = methodInstance;
                    }
                    
                    var headersSequenceElement = requestValue['headers'];
                    if (headersSequenceElement !== null && headersSequenceElement !== undefined) {
                      for (var property in headersSequenceElement) {
                        var headersKey = property;
                        var headersValue = headersSequenceElement[property];
                        requestInstance.headers[headersKey] = headersValue;
                      }
                    }
                    
                    var bodyValue = requestValue['body'];
                    if (bodyValue !== null && bodyValue !== undefined) {
                      var bodyInstance = bodyValue;
                      requestInstance.body = bodyInstance;
                    }
                    
                    var authenticationValue = requestValue['authentication'];
                    if (authenticationValue !== null && authenticationValue !== undefined) {
                      var typeName = authenticationValue['type'];
                      if (typeName === 'ClientCertificate') {
                        var clientCertAuthenticationInstance = {};
                        
                        var passwordValue = authenticationValue['password'];
                        if (passwordValue !== null && passwordValue !== undefined) {
                          var passwordInstance = passwordValue;
                          clientCertAuthenticationInstance.password = passwordInstance;
                        }
                        
                        var pfxValue = authenticationValue['pfx'];
                        if (pfxValue !== null && pfxValue !== undefined) {
                          var pfxInstance = pfxValue;
                          clientCertAuthenticationInstance.pfx = pfxInstance;
                        }
                        
                        var certificateThumbprintValue = authenticationValue['certificateThumbprint'];
                        if (certificateThumbprintValue !== null && certificateThumbprintValue !== undefined) {
                          var certificateThumbprintInstance = certificateThumbprintValue;
                          clientCertAuthenticationInstance.certificateThumbprint = certificateThumbprintInstance;
                        }
                        
                        var certificateExpirationValue = authenticationValue['certificateExpiration'];
                        if (certificateExpirationValue !== null && certificateExpirationValue !== undefined) {
                          var certificateExpirationInstance = certificateExpirationValue;
                          clientCertAuthenticationInstance.certificateExpiration = certificateExpirationInstance;
                        }
                        
                        var certificateSubjectNameValue = authenticationValue['certificateSubjectName'];
                        if (certificateSubjectNameValue !== null && certificateSubjectNameValue !== undefined) {
                          var certificateSubjectNameInstance = certificateSubjectNameValue;
                          clientCertAuthenticationInstance.certificateSubjectName = certificateSubjectNameInstance;
                        }
                        
                        var typeValue3 = authenticationValue['type'];
                        if (typeValue3 !== null && typeValue3 !== undefined) {
                          var typeInstance3 = typeValue3;
                          clientCertAuthenticationInstance.type = typeInstance3;
                        }
                        requestInstance.authentication = clientCertAuthenticationInstance;
                      }
                      if (typeName === 'ActiveDirectoryOAuth') {
                        var aADOAuthAuthenticationInstance = {};
                        
                        var secretValue = authenticationValue['secret'];
                        if (secretValue !== null && secretValue !== undefined) {
                          var secretInstance = secretValue;
                          aADOAuthAuthenticationInstance.secret = secretInstance;
                        }
                        
                        var tenantValue = authenticationValue['tenant'];
                        if (tenantValue !== null && tenantValue !== undefined) {
                          var tenantInstance = tenantValue;
                          aADOAuthAuthenticationInstance.tenant = tenantInstance;
                        }
                        
                        var audienceValue = authenticationValue['audience'];
                        if (audienceValue !== null && audienceValue !== undefined) {
                          var audienceInstance = audienceValue;
                          aADOAuthAuthenticationInstance.audience = audienceInstance;
                        }
                        
                        var clientIdValue = authenticationValue['clientId'];
                        if (clientIdValue !== null && clientIdValue !== undefined) {
                          var clientIdInstance = clientIdValue;
                          aADOAuthAuthenticationInstance.clientId = clientIdInstance;
                        }
                        
                        var typeValue4 = authenticationValue['type'];
                        if (typeValue4 !== null && typeValue4 !== undefined) {
                          var typeInstance4 = typeValue4;
                          aADOAuthAuthenticationInstance.type = typeInstance4;
                        }
                        requestInstance.authentication = aADOAuthAuthenticationInstance;
                      }
                      if (typeName === 'Basic') {
                        var basicAuthenticationInstance = {};
                        
                        var usernameValue = authenticationValue['username'];
                        if (usernameValue !== null && usernameValue !== undefined) {
                          var usernameInstance = usernameValue;
                          basicAuthenticationInstance.username = usernameInstance;
                        }
                        
                        var passwordValue2 = authenticationValue['password'];
                        if (passwordValue2 !== null && passwordValue2 !== undefined) {
                          var passwordInstance2 = passwordValue2;
                          basicAuthenticationInstance.password = passwordInstance2;
                        }
                        
                        var typeValue5 = authenticationValue['type'];
                        if (typeValue5 !== null && typeValue5 !== undefined) {
                          var typeInstance5 = typeValue5;
                          basicAuthenticationInstance.type = typeInstance5;
                        }
                        requestInstance.authentication = basicAuthenticationInstance;
                      }
                    }
                  }
                  
                  var queueMessageValue = errorActionValue['queueMessage'];
                  if (queueMessageValue !== null && queueMessageValue !== undefined) {
                    var queueMessageInstance = {};
                    errorActionInstance.queueMessage = queueMessageInstance;
                    
                    var storageAccountValue = queueMessageValue['storageAccount'];
                    if (storageAccountValue !== null && storageAccountValue !== undefined) {
                      var storageAccountInstance = storageAccountValue;
                      queueMessageInstance.storageAccountName = storageAccountInstance;
                    }
                    
                    var queueNameValue = queueMessageValue['queueName'];
                    if (queueNameValue !== null && queueNameValue !== undefined) {
                      var queueNameInstance = queueNameValue;
                      queueMessageInstance.queueName = queueNameInstance;
                    }
                    
                    var sasTokenValue = queueMessageValue['sasToken'];
                    if (sasTokenValue !== null && sasTokenValue !== undefined) {
                      var sasTokenInstance = sasTokenValue;
                      queueMessageInstance.sasToken = sasTokenInstance;
                    }
                    
                    var messageValue = queueMessageValue['message'];
                    if (messageValue !== null && messageValue !== undefined) {
                      var messageInstance = messageValue;
                      queueMessageInstance.message = messageInstance;
                    }
                  }
                }
                
                var requestValue2 = actionValue['request'];
                if (requestValue2 !== null && requestValue2 !== undefined) {
                  var requestInstance2 = { headers: {} };
                  actionInstance.request = requestInstance2;
                  
                  var uriValue2 = requestValue2['uri'];
                  if (uriValue2 !== null && uriValue2 !== undefined) {
                    var uriInstance2 = uriValue2;
                    requestInstance2.uri = uriInstance2;
                  }
                  
                  var methodValue2 = requestValue2['method'];
                  if (methodValue2 !== null && methodValue2 !== undefined) {
                    var methodInstance2 = methodValue2;
                    requestInstance2.method = methodInstance2;
                  }
                  
                  var headersSequenceElement2 = requestValue2['headers'];
                  if (headersSequenceElement2 !== null && headersSequenceElement2 !== undefined) {
                    for (var property2 in headersSequenceElement2) {
                      var headersKey2 = property2;
                      var headersValue2 = headersSequenceElement2[property2];
                      requestInstance2.headers[headersKey2] = headersValue2;
                    }
                  }
                  
                  var bodyValue2 = requestValue2['body'];
                  if (bodyValue2 !== null && bodyValue2 !== undefined) {
                    var bodyInstance2 = bodyValue2;
                    requestInstance2.body = bodyInstance2;
                  }
                  
                  var authenticationValue2 = requestValue2['authentication'];
                  if (authenticationValue2 !== null && authenticationValue2 !== undefined) {
                    var typeName2 = authenticationValue2['type'];
                    if (typeName2 === 'ClientCertificate') {
                      var clientCertAuthenticationInstance2 = {};
                      
                      var passwordValue3 = authenticationValue2['password'];
                      if (passwordValue3 !== null && passwordValue3 !== undefined) {
                        var passwordInstance3 = passwordValue3;
                        clientCertAuthenticationInstance2.password = passwordInstance3;
                      }
                      
                      var pfxValue2 = authenticationValue2['pfx'];
                      if (pfxValue2 !== null && pfxValue2 !== undefined) {
                        var pfxInstance2 = pfxValue2;
                        clientCertAuthenticationInstance2.pfx = pfxInstance2;
                      }
                      
                      var certificateThumbprintValue2 = authenticationValue2['certificateThumbprint'];
                      if (certificateThumbprintValue2 !== null && certificateThumbprintValue2 !== undefined) {
                        var certificateThumbprintInstance2 = certificateThumbprintValue2;
                        clientCertAuthenticationInstance2.certificateThumbprint = certificateThumbprintInstance2;
                      }
                      
                      var certificateExpirationValue2 = authenticationValue2['certificateExpiration'];
                      if (certificateExpirationValue2 !== null && certificateExpirationValue2 !== undefined) {
                        var certificateExpirationInstance2 = certificateExpirationValue2;
                        clientCertAuthenticationInstance2.certificateExpiration = certificateExpirationInstance2;
                      }
                      
                      var certificateSubjectNameValue2 = authenticationValue2['certificateSubjectName'];
                      if (certificateSubjectNameValue2 !== null && certificateSubjectNameValue2 !== undefined) {
                        var certificateSubjectNameInstance2 = certificateSubjectNameValue2;
                        clientCertAuthenticationInstance2.certificateSubjectName = certificateSubjectNameInstance2;
                      }
                      
                      var typeValue6 = authenticationValue2['type'];
                      if (typeValue6 !== null && typeValue6 !== undefined) {
                        var typeInstance6 = typeValue6;
                        clientCertAuthenticationInstance2.type = typeInstance6;
                      }
                      requestInstance2.authentication = clientCertAuthenticationInstance2;
                    }
                    if (typeName2 === 'ActiveDirectoryOAuth') {
                      var aADOAuthAuthenticationInstance2 = {};
                      
                      var secretValue2 = authenticationValue2['secret'];
                      if (secretValue2 !== null && secretValue2 !== undefined) {
                        var secretInstance2 = secretValue2;
                        aADOAuthAuthenticationInstance2.secret = secretInstance2;
                      }
                      
                      var tenantValue2 = authenticationValue2['tenant'];
                      if (tenantValue2 !== null && tenantValue2 !== undefined) {
                        var tenantInstance2 = tenantValue2;
                        aADOAuthAuthenticationInstance2.tenant = tenantInstance2;
                      }
                      
                      var audienceValue2 = authenticationValue2['audience'];
                      if (audienceValue2 !== null && audienceValue2 !== undefined) {
                        var audienceInstance2 = audienceValue2;
                        aADOAuthAuthenticationInstance2.audience = audienceInstance2;
                      }
                      
                      var clientIdValue2 = authenticationValue2['clientId'];
                      if (clientIdValue2 !== null && clientIdValue2 !== undefined) {
                        var clientIdInstance2 = clientIdValue2;
                        aADOAuthAuthenticationInstance2.clientId = clientIdInstance2;
                      }
                      
                      var typeValue7 = authenticationValue2['type'];
                      if (typeValue7 !== null && typeValue7 !== undefined) {
                        var typeInstance7 = typeValue7;
                        aADOAuthAuthenticationInstance2.type = typeInstance7;
                      }
                      requestInstance2.authentication = aADOAuthAuthenticationInstance2;
                    }
                    if (typeName2 === 'Basic') {
                      var basicAuthenticationInstance2 = {};
                      
                      var usernameValue2 = authenticationValue2['username'];
                      if (usernameValue2 !== null && usernameValue2 !== undefined) {
                        var usernameInstance2 = usernameValue2;
                        basicAuthenticationInstance2.username = usernameInstance2;
                      }
                      
                      var passwordValue4 = authenticationValue2['password'];
                      if (passwordValue4 !== null && passwordValue4 !== undefined) {
                        var passwordInstance4 = passwordValue4;
                        basicAuthenticationInstance2.password = passwordInstance4;
                      }
                      
                      var typeValue8 = authenticationValue2['type'];
                      if (typeValue8 !== null && typeValue8 !== undefined) {
                        var typeInstance8 = typeValue8;
                        basicAuthenticationInstance2.type = typeInstance8;
                      }
                      requestInstance2.authentication = basicAuthenticationInstance2;
                    }
                  }
                }
                
                var queueMessageValue2 = actionValue['queueMessage'];
                if (queueMessageValue2 !== null && queueMessageValue2 !== undefined) {
                  var queueMessageInstance2 = {};
                  actionInstance.queueMessage = queueMessageInstance2;
                  
                  var storageAccountValue2 = queueMessageValue2['storageAccount'];
                  if (storageAccountValue2 !== null && storageAccountValue2 !== undefined) {
                    var storageAccountInstance2 = storageAccountValue2;
                    queueMessageInstance2.storageAccountName = storageAccountInstance2;
                  }
                  
                  var queueNameValue2 = queueMessageValue2['queueName'];
                  if (queueNameValue2 !== null && queueNameValue2 !== undefined) {
                    var queueNameInstance2 = queueNameValue2;
                    queueMessageInstance2.queueName = queueNameInstance2;
                  }
                  
                  var sasTokenValue2 = queueMessageValue2['sasToken'];
                  if (sasTokenValue2 !== null && sasTokenValue2 !== undefined) {
                    var sasTokenInstance2 = sasTokenValue2;
                    queueMessageInstance2.sasToken = sasTokenInstance2;
                  }
                  
                  var messageValue2 = queueMessageValue2['message'];
                  if (messageValue2 !== null && messageValue2 !== undefined) {
                    var messageInstance2 = messageValue2;
                    queueMessageInstance2.message = messageInstance2;
                  }
                }
              }
              
              var recurrenceValue = jobsValue['recurrence'];
              if (recurrenceValue !== null && recurrenceValue !== undefined) {
                var recurrenceInstance = {};
                jobInstance.recurrence = recurrenceInstance;
                
                var frequencyValue = recurrenceValue['frequency'];
                if (frequencyValue !== null && frequencyValue !== undefined) {
                  var frequencyInstance = frequencyValue;
                  recurrenceInstance.frequency = frequencyInstance;
                }
                
                var intervalValue = recurrenceValue['interval'];
                if (intervalValue !== null && intervalValue !== undefined) {
                  var intervalInstance = intervalValue;
                  recurrenceInstance.interval = intervalInstance;
                }
                
                var countValue = recurrenceValue['count'];
                if (countValue !== null && countValue !== undefined) {
                  var countInstance = countValue;
                  recurrenceInstance.count = countInstance;
                }
                
                var endTimeValue = recurrenceValue['endTime'];
                if (endTimeValue !== null && endTimeValue !== undefined) {
                  var endTimeInstance = endTimeValue;
                  recurrenceInstance.endTime = endTimeInstance;
                }
                
                var scheduleValue = recurrenceValue['schedule'];
                if (scheduleValue !== null && scheduleValue !== undefined) {
                  var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
                  recurrenceInstance.schedule = scheduleInstance;
                  
                  var minutesArray = scheduleValue['minutes'];
                  if (minutesArray !== null && minutesArray !== undefined) {
                    scheduleInstance.minutes = [];
                    for (var loweredIndex2 = 0; loweredIndex2 < minutesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var minutesValue = minutesArray[loweredIndex2];
                      scheduleInstance.minutes.push(minutesValue);
                    }
                  }
                  
                  var hoursArray = scheduleValue['hours'];
                  if (hoursArray !== null && hoursArray !== undefined) {
                    scheduleInstance.hours = [];
                    for (var loweredIndex3 = 0; loweredIndex3 < hoursArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var hoursValue = hoursArray[loweredIndex3];
                      scheduleInstance.hours.push(hoursValue);
                    }
                  }
                  
                  var weekDaysArray = scheduleValue['weekDays'];
                  if (weekDaysArray !== null && weekDaysArray !== undefined) {
                    scheduleInstance.days = [];
                    for (var loweredIndex4 = 0; loweredIndex4 < weekDaysArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var weekDaysValue = weekDaysArray[loweredIndex4];
                      scheduleInstance.days.push(weekDaysValue);
                    }
                  }
                  
                  var monthsArray = scheduleValue['months'];
                  if (monthsArray !== null && monthsArray !== undefined) {
                    scheduleInstance.months = [];
                    for (var loweredIndex5 = 0; loweredIndex5 < monthsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var monthsValue = monthsArray[loweredIndex5];
                      scheduleInstance.months.push(monthsValue);
                    }
                  }
                  
                  var monthDaysArray = scheduleValue['monthDays'];
                  if (monthDaysArray !== null && monthDaysArray !== undefined) {
                    scheduleInstance.monthDays = [];
                    for (var loweredIndex6 = 0; loweredIndex6 < monthDaysArray.length; loweredIndex6 = loweredIndex6 + 1) {
                      var monthDaysValue = monthDaysArray[loweredIndex6];
                      scheduleInstance.monthDays.push(monthDaysValue);
                    }
                  }
                  
                  var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
                  if (monthlyOccurrencesArray !== null && monthlyOccurrencesArray !== undefined) {
                    scheduleInstance.monthlyOccurrences = [];
                    for (var loweredIndex7 = 0; loweredIndex7 < monthlyOccurrencesArray.length; loweredIndex7 = loweredIndex7 + 1) {
                      var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex7];
                      var jobScheduleMonthlyOccurrenceInstance = {};
                      scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                      
                      var dayValue = monthlyOccurrencesValue['day'];
                      if (dayValue !== null && dayValue !== undefined) {
                        var dayInstance = dayValue;
                        jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                      }
                      
                      var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                      if (occurrenceValue !== null && occurrenceValue !== undefined) {
                        var occurrenceInstance = occurrenceValue;
                        jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                      }
                    }
                  }
                }
              }
              
              var statusValue = jobsValue['status'];
              if (statusValue !== null && statusValue !== undefined) {
                var statusInstance = {};
                jobInstance.status = statusInstance;
                
                var lastExecutionTimeValue = statusValue['lastExecutionTime'];
                if (lastExecutionTimeValue !== null && lastExecutionTimeValue !== undefined) {
                  var lastExecutionTimeInstance = lastExecutionTimeValue;
                  statusInstance.lastExecutionTime = lastExecutionTimeInstance;
                }
                
                var nextExecutionTimeValue = statusValue['nextExecutionTime'];
                if (nextExecutionTimeValue !== null && nextExecutionTimeValue !== undefined) {
                  var nextExecutionTimeInstance = nextExecutionTimeValue;
                  statusInstance.nextExecutionTime = nextExecutionTimeInstance;
                }
                
                var executionCountValue = statusValue['executionCount'];
                if (executionCountValue !== null && executionCountValue !== undefined) {
                  var executionCountInstance = executionCountValue;
                  statusInstance.executionCount = executionCountInstance;
                }
                
                var failureCountValue = statusValue['failureCount'];
                if (failureCountValue !== null && failureCountValue !== undefined) {
                  var failureCountInstance = failureCountValue;
                  statusInstance.failureCount = failureCountInstance;
                }
                
                var faultedCountValue = statusValue['faultedCount'];
                if (faultedCountValue !== null && faultedCountValue !== undefined) {
                  var faultedCountInstance = faultedCountValue;
                  statusInstance.faultedCount = faultedCountInstance;
                }
              }
              
              var stateValue = jobsValue['state'];
              if (stateValue !== null && stateValue !== undefined) {
                var stateInstance = stateValue;
                jobInstance.state = stateInstance;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Update the state of a job.
   * 
   * @param {string} jobId Id of the job to update.
   * 
   * @param {JobUpdateStateParameters} parameters Parameters supplied to the
   * Update Job State operation.
   * 
   * @param {JobState} parameters.state New state to update to: 'enabled' or
   * 'disabled'.
   * 
   * @param {string} [parameters.updateStateReason] A description of the
   * circumstances associated with this job state update.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  JobOperations.prototype.updateState = function(jobId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (jobId === null || jobId === undefined) {
      return callback(new Error('jobId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.state === null || parameters.state === undefined) {
      return callback(new Error('parameters.state cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/cloudservices/';
    url2 = url2 + encodeURIComponent(this.client.cloudServiceName);
    url2 = url2 + '/resources/';
    url2 = url2 + 'scheduler';
    url2 = url2 + '/~/';
    url2 = url2 + 'JobCollections';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(this.client.jobCollectionName);
    url2 = url2 + '/jobs/';
    url2 = url2 + encodeURIComponent(jobId);
    var queryParameters = [];
    queryParameters.push('api-version=2014-04-01');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var jobUpdateStateParametersValue = {};
    requestDoc = jobUpdateStateParametersValue;
    
    jobUpdateStateParametersValue['state'] = parameters.state !== null && parameters.state !== undefined ? parameters.state.toString() : 'Enabled';
    
    if (parameters.updateStateReason !== null && parameters.updateStateReason !== undefined) {
      jobUpdateStateParametersValue['stateDetails'] = parameters.updateStateReason;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var jobInstance = {};
          result.job = jobInstance;
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            jobInstance.id = idInstance;
          }
          
          var startTimeValue = responseDoc['startTime'];
          if (startTimeValue !== null && startTimeValue !== undefined) {
            var startTimeInstance = startTimeValue;
            jobInstance.startTime = startTimeInstance;
          }
          
          var actionValue = responseDoc['action'];
          if (actionValue !== null && actionValue !== undefined) {
            var actionInstance = {};
            jobInstance.action = actionInstance;
            
            var typeValue = actionValue['type'];
            if (typeValue !== null && typeValue !== undefined) {
              var typeInstance = typeValue;
              actionInstance.type = typeInstance;
            }
            
            var retryPolicyValue = actionValue['retryPolicy'];
            if (retryPolicyValue !== null && retryPolicyValue !== undefined) {
              var retryPolicyInstance = {};
              actionInstance.retryPolicy = retryPolicyInstance;
              
              var retryTypeValue = retryPolicyValue['retryType'];
              if (retryTypeValue !== null && retryTypeValue !== undefined) {
                var retryTypeInstance = retryTypeValue;
                retryPolicyInstance.retryType = retryTypeInstance;
              }
              
              var retryIntervalValue = retryPolicyValue['retryInterval'];
              if (retryIntervalValue !== null && retryIntervalValue !== undefined) {
                var retryIntervalInstance = moment.duration(retryIntervalValue);
                retryPolicyInstance.retryInterval = retryIntervalInstance;
              }
              
              var retryCountValue = retryPolicyValue['retryCount'];
              if (retryCountValue !== null && retryCountValue !== undefined) {
                var retryCountInstance = retryCountValue;
                retryPolicyInstance.retryCount = retryCountInstance;
              }
            }
            
            var errorActionValue = actionValue['errorAction'];
            if (errorActionValue !== null && errorActionValue !== undefined) {
              var errorActionInstance = {};
              actionInstance.errorAction = errorActionInstance;
              
              var typeValue2 = errorActionValue['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                errorActionInstance.type = typeInstance2;
              }
              
              var requestValue = errorActionValue['request'];
              if (requestValue !== null && requestValue !== undefined) {
                var requestInstance = { headers: {} };
                errorActionInstance.request = requestInstance;
                
                var uriValue = requestValue['uri'];
                if (uriValue !== null && uriValue !== undefined) {
                  var uriInstance = uriValue;
                  requestInstance.uri = uriInstance;
                }
                
                var methodValue = requestValue['method'];
                if (methodValue !== null && methodValue !== undefined) {
                  var methodInstance = methodValue;
                  requestInstance.method = methodInstance;
                }
                
                var headersSequenceElement = requestValue['headers'];
                if (headersSequenceElement !== null && headersSequenceElement !== undefined) {
                  for (var property in headersSequenceElement) {
                    var headersKey = property;
                    var headersValue = headersSequenceElement[property];
                    requestInstance.headers[headersKey] = headersValue;
                  }
                }
                
                var bodyValue = requestValue['body'];
                if (bodyValue !== null && bodyValue !== undefined) {
                  var bodyInstance = bodyValue;
                  requestInstance.body = bodyInstance;
                }
                
                var authenticationValue = requestValue['authentication'];
                if (authenticationValue !== null && authenticationValue !== undefined) {
                  var typeName = authenticationValue['type'];
                  if (typeName === 'ClientCertificate') {
                    var clientCertAuthenticationInstance = {};
                    
                    var passwordValue = authenticationValue['password'];
                    if (passwordValue !== null && passwordValue !== undefined) {
                      var passwordInstance = passwordValue;
                      clientCertAuthenticationInstance.password = passwordInstance;
                    }
                    
                    var pfxValue = authenticationValue['pfx'];
                    if (pfxValue !== null && pfxValue !== undefined) {
                      var pfxInstance = pfxValue;
                      clientCertAuthenticationInstance.pfx = pfxInstance;
                    }
                    
                    var certificateThumbprintValue = authenticationValue['certificateThumbprint'];
                    if (certificateThumbprintValue !== null && certificateThumbprintValue !== undefined) {
                      var certificateThumbprintInstance = certificateThumbprintValue;
                      clientCertAuthenticationInstance.certificateThumbprint = certificateThumbprintInstance;
                    }
                    
                    var certificateExpirationValue = authenticationValue['certificateExpiration'];
                    if (certificateExpirationValue !== null && certificateExpirationValue !== undefined) {
                      var certificateExpirationInstance = certificateExpirationValue;
                      clientCertAuthenticationInstance.certificateExpiration = certificateExpirationInstance;
                    }
                    
                    var certificateSubjectNameValue = authenticationValue['certificateSubjectName'];
                    if (certificateSubjectNameValue !== null && certificateSubjectNameValue !== undefined) {
                      var certificateSubjectNameInstance = certificateSubjectNameValue;
                      clientCertAuthenticationInstance.certificateSubjectName = certificateSubjectNameInstance;
                    }
                    
                    var typeValue3 = authenticationValue['type'];
                    if (typeValue3 !== null && typeValue3 !== undefined) {
                      var typeInstance3 = typeValue3;
                      clientCertAuthenticationInstance.type = typeInstance3;
                    }
                    requestInstance.authentication = clientCertAuthenticationInstance;
                  }
                  if (typeName === 'ActiveDirectoryOAuth') {
                    var aADOAuthAuthenticationInstance = {};
                    
                    var secretValue = authenticationValue['secret'];
                    if (secretValue !== null && secretValue !== undefined) {
                      var secretInstance = secretValue;
                      aADOAuthAuthenticationInstance.secret = secretInstance;
                    }
                    
                    var tenantValue = authenticationValue['tenant'];
                    if (tenantValue !== null && tenantValue !== undefined) {
                      var tenantInstance = tenantValue;
                      aADOAuthAuthenticationInstance.tenant = tenantInstance;
                    }
                    
                    var audienceValue = authenticationValue['audience'];
                    if (audienceValue !== null && audienceValue !== undefined) {
                      var audienceInstance = audienceValue;
                      aADOAuthAuthenticationInstance.audience = audienceInstance;
                    }
                    
                    var clientIdValue = authenticationValue['clientId'];
                    if (clientIdValue !== null && clientIdValue !== undefined) {
                      var clientIdInstance = clientIdValue;
                      aADOAuthAuthenticationInstance.clientId = clientIdInstance;
                    }
                    
                    var typeValue4 = authenticationValue['type'];
                    if (typeValue4 !== null && typeValue4 !== undefined) {
                      var typeInstance4 = typeValue4;
                      aADOAuthAuthenticationInstance.type = typeInstance4;
                    }
                    requestInstance.authentication = aADOAuthAuthenticationInstance;
                  }
                  if (typeName === 'Basic') {
                    var basicAuthenticationInstance = {};
                    
                    var usernameValue = authenticationValue['username'];
                    if (usernameValue !== null && usernameValue !== undefined) {
                      var usernameInstance = usernameValue;
                      basicAuthenticationInstance.username = usernameInstance;
                    }
                    
                    var passwordValue2 = authenticationValue['password'];
                    if (passwordValue2 !== null && passwordValue2 !== undefined) {
                      var passwordInstance2 = passwordValue2;
                      basicAuthenticationInstance.password = passwordInstance2;
                    }
                    
                    var typeValue5 = authenticationValue['type'];
                    if (typeValue5 !== null && typeValue5 !== undefined) {
                      var typeInstance5 = typeValue5;
                      basicAuthenticationInstance.type = typeInstance5;
                    }
                    requestInstance.authentication = basicAuthenticationInstance;
                  }
                }
              }
              
              var queueMessageValue = errorActionValue['queueMessage'];
              if (queueMessageValue !== null && queueMessageValue !== undefined) {
                var queueMessageInstance = {};
                errorActionInstance.queueMessage = queueMessageInstance;
                
                var storageAccountValue = queueMessageValue['storageAccount'];
                if (storageAccountValue !== null && storageAccountValue !== undefined) {
                  var storageAccountInstance = storageAccountValue;
                  queueMessageInstance.storageAccountName = storageAccountInstance;
                }
                
                var queueNameValue = queueMessageValue['queueName'];
                if (queueNameValue !== null && queueNameValue !== undefined) {
                  var queueNameInstance = queueNameValue;
                  queueMessageInstance.queueName = queueNameInstance;
                }
                
                var sasTokenValue = queueMessageValue['sasToken'];
                if (sasTokenValue !== null && sasTokenValue !== undefined) {
                  var sasTokenInstance = sasTokenValue;
                  queueMessageInstance.sasToken = sasTokenInstance;
                }
                
                var messageValue = queueMessageValue['message'];
                if (messageValue !== null && messageValue !== undefined) {
                  var messageInstance = messageValue;
                  queueMessageInstance.message = messageInstance;
                }
              }
            }
            
            var requestValue2 = actionValue['request'];
            if (requestValue2 !== null && requestValue2 !== undefined) {
              var requestInstance2 = { headers: {} };
              actionInstance.request = requestInstance2;
              
              var uriValue2 = requestValue2['uri'];
              if (uriValue2 !== null && uriValue2 !== undefined) {
                var uriInstance2 = uriValue2;
                requestInstance2.uri = uriInstance2;
              }
              
              var methodValue2 = requestValue2['method'];
              if (methodValue2 !== null && methodValue2 !== undefined) {
                var methodInstance2 = methodValue2;
                requestInstance2.method = methodInstance2;
              }
              
              var headersSequenceElement2 = requestValue2['headers'];
              if (headersSequenceElement2 !== null && headersSequenceElement2 !== undefined) {
                for (var property2 in headersSequenceElement2) {
                  var headersKey2 = property2;
                  var headersValue2 = headersSequenceElement2[property2];
                  requestInstance2.headers[headersKey2] = headersValue2;
                }
              }
              
              var bodyValue2 = requestValue2['body'];
              if (bodyValue2 !== null && bodyValue2 !== undefined) {
                var bodyInstance2 = bodyValue2;
                requestInstance2.body = bodyInstance2;
              }
              
              var authenticationValue2 = requestValue2['authentication'];
              if (authenticationValue2 !== null && authenticationValue2 !== undefined) {
                var typeName2 = authenticationValue2['type'];
                if (typeName2 === 'ClientCertificate') {
                  var clientCertAuthenticationInstance2 = {};
                  
                  var passwordValue3 = authenticationValue2['password'];
                  if (passwordValue3 !== null && passwordValue3 !== undefined) {
                    var passwordInstance3 = passwordValue3;
                    clientCertAuthenticationInstance2.password = passwordInstance3;
                  }
                  
                  var pfxValue2 = authenticationValue2['pfx'];
                  if (pfxValue2 !== null && pfxValue2 !== undefined) {
                    var pfxInstance2 = pfxValue2;
                    clientCertAuthenticationInstance2.pfx = pfxInstance2;
                  }
                  
                  var certificateThumbprintValue2 = authenticationValue2['certificateThumbprint'];
                  if (certificateThumbprintValue2 !== null && certificateThumbprintValue2 !== undefined) {
                    var certificateThumbprintInstance2 = certificateThumbprintValue2;
                    clientCertAuthenticationInstance2.certificateThumbprint = certificateThumbprintInstance2;
                  }
                  
                  var certificateExpirationValue2 = authenticationValue2['certificateExpiration'];
                  if (certificateExpirationValue2 !== null && certificateExpirationValue2 !== undefined) {
                    var certificateExpirationInstance2 = certificateExpirationValue2;
                    clientCertAuthenticationInstance2.certificateExpiration = certificateExpirationInstance2;
                  }
                  
                  var certificateSubjectNameValue2 = authenticationValue2['certificateSubjectName'];
                  if (certificateSubjectNameValue2 !== null && certificateSubjectNameValue2 !== undefined) {
                    var certificateSubjectNameInstance2 = certificateSubjectNameValue2;
                    clientCertAuthenticationInstance2.certificateSubjectName = certificateSubjectNameInstance2;
                  }
                  
                  var typeValue6 = authenticationValue2['type'];
                  if (typeValue6 !== null && typeValue6 !== undefined) {
                    var typeInstance6 = typeValue6;
                    clientCertAuthenticationInstance2.type = typeInstance6;
                  }
                  requestInstance2.authentication = clientCertAuthenticationInstance2;
                }
                if (typeName2 === 'ActiveDirectoryOAuth') {
                  var aADOAuthAuthenticationInstance2 = {};
                  
                  var secretValue2 = authenticationValue2['secret'];
                  if (secretValue2 !== null && secretValue2 !== undefined) {
                    var secretInstance2 = secretValue2;
                    aADOAuthAuthenticationInstance2.secret = secretInstance2;
                  }
                  
                  var tenantValue2 = authenticationValue2['tenant'];
                  if (tenantValue2 !== null && tenantValue2 !== undefined) {
                    var tenantInstance2 = tenantValue2;
                    aADOAuthAuthenticationInstance2.tenant = tenantInstance2;
                  }
                  
                  var audienceValue2 = authenticationValue2['audience'];
                  if (audienceValue2 !== null && audienceValue2 !== undefined) {
                    var audienceInstance2 = audienceValue2;
                    aADOAuthAuthenticationInstance2.audience = audienceInstance2;
                  }
                  
                  var clientIdValue2 = authenticationValue2['clientId'];
                  if (clientIdValue2 !== null && clientIdValue2 !== undefined) {
                    var clientIdInstance2 = clientIdValue2;
                    aADOAuthAuthenticationInstance2.clientId = clientIdInstance2;
                  }
                  
                  var typeValue7 = authenticationValue2['type'];
                  if (typeValue7 !== null && typeValue7 !== undefined) {
                    var typeInstance7 = typeValue7;
                    aADOAuthAuthenticationInstance2.type = typeInstance7;
                  }
                  requestInstance2.authentication = aADOAuthAuthenticationInstance2;
                }
                if (typeName2 === 'Basic') {
                  var basicAuthenticationInstance2 = {};
                  
                  var usernameValue2 = authenticationValue2['username'];
                  if (usernameValue2 !== null && usernameValue2 !== undefined) {
                    var usernameInstance2 = usernameValue2;
                    basicAuthenticationInstance2.username = usernameInstance2;
                  }
                  
                  var passwordValue4 = authenticationValue2['password'];
                  if (passwordValue4 !== null && passwordValue4 !== undefined) {
                    var passwordInstance4 = passwordValue4;
                    basicAuthenticationInstance2.password = passwordInstance4;
                  }
                  
                  var typeValue8 = authenticationValue2['type'];
                  if (typeValue8 !== null && typeValue8 !== undefined) {
                    var typeInstance8 = typeValue8;
                    basicAuthenticationInstance2.type = typeInstance8;
                  }
                  requestInstance2.authentication = basicAuthenticationInstance2;
                }
              }
            }
            
            var queueMessageValue2 = actionValue['queueMessage'];
            if (queueMessageValue2 !== null && queueMessageValue2 !== undefined) {
              var queueMessageInstance2 = {};
              actionInstance.queueMessage = queueMessageInstance2;
              
              var storageAccountValue2 = queueMessageValue2['storageAccount'];
              if (storageAccountValue2 !== null && storageAccountValue2 !== undefined) {
                var storageAccountInstance2 = storageAccountValue2;
                queueMessageInstance2.storageAccountName = storageAccountInstance2;
              }
              
              var queueNameValue2 = queueMessageValue2['queueName'];
              if (queueNameValue2 !== null && queueNameValue2 !== undefined) {
                var queueNameInstance2 = queueNameValue2;
                queueMessageInstance2.queueName = queueNameInstance2;
              }
              
              var sasTokenValue2 = queueMessageValue2['sasToken'];
              if (sasTokenValue2 !== null && sasTokenValue2 !== undefined) {
                var sasTokenInstance2 = sasTokenValue2;
                queueMessageInstance2.sasToken = sasTokenInstance2;
              }
              
              var messageValue2 = queueMessageValue2['message'];
              if (messageValue2 !== null && messageValue2 !== undefined) {
                var messageInstance2 = messageValue2;
                queueMessageInstance2.message = messageInstance2;
              }
            }
          }
          
          var recurrenceValue = responseDoc['recurrence'];
          if (recurrenceValue !== null && recurrenceValue !== undefined) {
            var recurrenceInstance = {};
            jobInstance.recurrence = recurrenceInstance;
            
            var frequencyValue = recurrenceValue['frequency'];
            if (frequencyValue !== null && frequencyValue !== undefined) {
              var frequencyInstance = frequencyValue;
              recurrenceInstance.frequency = frequencyInstance;
            }
            
            var intervalValue = recurrenceValue['interval'];
            if (intervalValue !== null && intervalValue !== undefined) {
              var intervalInstance = intervalValue;
              recurrenceInstance.interval = intervalInstance;
            }
            
            var countValue = recurrenceValue['count'];
            if (countValue !== null && countValue !== undefined) {
              var countInstance = countValue;
              recurrenceInstance.count = countInstance;
            }
            
            var endTimeValue = recurrenceValue['endTime'];
            if (endTimeValue !== null && endTimeValue !== undefined) {
              var endTimeInstance = endTimeValue;
              recurrenceInstance.endTime = endTimeInstance;
            }
            
            var scheduleValue = recurrenceValue['schedule'];
            if (scheduleValue !== null && scheduleValue !== undefined) {
              var scheduleInstance = { days: [], hours: [], minutes: [], monthDays: [], monthlyOccurrences: [], months: [] };
              recurrenceInstance.schedule = scheduleInstance;
              
              var minutesArray = scheduleValue['minutes'];
              if (minutesArray !== null && minutesArray !== undefined) {
                scheduleInstance.minutes = [];
                for (var loweredIndex1 = 0; loweredIndex1 < minutesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var minutesValue = minutesArray[loweredIndex1];
                  scheduleInstance.minutes.push(minutesValue);
                }
              }
              
              var hoursArray = scheduleValue['hours'];
              if (hoursArray !== null && hoursArray !== undefined) {
                scheduleInstance.hours = [];
                for (var loweredIndex2 = 0; loweredIndex2 < hoursArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var hoursValue = hoursArray[loweredIndex2];
                  scheduleInstance.hours.push(hoursValue);
                }
              }
              
              var weekDaysArray = scheduleValue['weekDays'];
              if (weekDaysArray !== null && weekDaysArray !== undefined) {
                scheduleInstance.days = [];
                for (var loweredIndex3 = 0; loweredIndex3 < weekDaysArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var weekDaysValue = weekDaysArray[loweredIndex3];
                  scheduleInstance.days.push(weekDaysValue);
                }
              }
              
              var monthsArray = scheduleValue['months'];
              if (monthsArray !== null && monthsArray !== undefined) {
                scheduleInstance.months = [];
                for (var loweredIndex4 = 0; loweredIndex4 < monthsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                  var monthsValue = monthsArray[loweredIndex4];
                  scheduleInstance.months.push(monthsValue);
                }
              }
              
              var monthDaysArray = scheduleValue['monthDays'];
              if (monthDaysArray !== null && monthDaysArray !== undefined) {
                scheduleInstance.monthDays = [];
                for (var loweredIndex5 = 0; loweredIndex5 < monthDaysArray.length; loweredIndex5 = loweredIndex5 + 1) {
                  var monthDaysValue = monthDaysArray[loweredIndex5];
                  scheduleInstance.monthDays.push(monthDaysValue);
                }
              }
              
              var monthlyOccurrencesArray = scheduleValue['monthlyOccurrences'];
              if (monthlyOccurrencesArray !== null && monthlyOccurrencesArray !== undefined) {
                scheduleInstance.monthlyOccurrences = [];
                for (var loweredIndex6 = 0; loweredIndex6 < monthlyOccurrencesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                  var monthlyOccurrencesValue = monthlyOccurrencesArray[loweredIndex6];
                  var jobScheduleMonthlyOccurrenceInstance = {};
                  scheduleInstance.monthlyOccurrences.push(jobScheduleMonthlyOccurrenceInstance);
                  
                  var dayValue = monthlyOccurrencesValue['day'];
                  if (dayValue !== null && dayValue !== undefined) {
                    var dayInstance = dayValue;
                    jobScheduleMonthlyOccurrenceInstance.day = dayInstance;
                  }
                  
                  var occurrenceValue = monthlyOccurrencesValue['occurrence'];
                  if (occurrenceValue !== null && occurrenceValue !== undefined) {
                    var occurrenceInstance = occurrenceValue;
                    jobScheduleMonthlyOccurrenceInstance.occurrence = occurrenceInstance;
                  }
                }
              }
            }
          }
          
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = {};
            jobInstance.status = statusInstance;
            
            var lastExecutionTimeValue = statusValue['lastExecutionTime'];
            if (lastExecutionTimeValue !== null && lastExecutionTimeValue !== undefined) {
              var lastExecutionTimeInstance = lastExecutionTimeValue;
              statusInstance.lastExecutionTime = lastExecutionTimeInstance;
            }
            
            var nextExecutionTimeValue = statusValue['nextExecutionTime'];
            if (nextExecutionTimeValue !== null && nextExecutionTimeValue !== undefined) {
              var nextExecutionTimeInstance = nextExecutionTimeValue;
              statusInstance.nextExecutionTime = nextExecutionTimeInstance;
            }
            
            var executionCountValue = statusValue['executionCount'];
            if (executionCountValue !== null && executionCountValue !== undefined) {
              var executionCountInstance = executionCountValue;
              statusInstance.executionCount = executionCountInstance;
            }
            
            var failureCountValue = statusValue['failureCount'];
            if (failureCountValue !== null && failureCountValue !== undefined) {
              var failureCountInstance = failureCountValue;
              statusInstance.failureCount = failureCountInstance;
            }
            
            var faultedCountValue = statusValue['faultedCount'];
            if (faultedCountValue !== null && faultedCountValue !== undefined) {
              var faultedCountInstance = faultedCountValue;
              statusInstance.faultedCount = faultedCountInstance;
            }
          }
          
          var stateValue = responseDoc['state'];
          if (stateValue !== null && stateValue !== undefined) {
            var stateInstance = stateValue;
            jobInstance.state = stateInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return JobOperations;
})();
